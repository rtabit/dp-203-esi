{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspace67xklnc"
		},
		"asacosmosdb01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asacosmosdb01'"
		},
		"asadatalake67xklnc_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalake67xklnc'"
		},
		"asastore67xklnc_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastore67xklnc'"
		},
		"asaworkspace67xklnc-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspace67xklnc-WorkspaceDefaultSqlServer'"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'"
		},
		"sqlpool01_highperf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_highperf'"
		},
		"sqlpool01_import01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_import01'"
		},
		"sqlpool01_workload01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload01'"
		},
		"sqlpool01_workload02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload02'"
		},
		"asadatalake67xklnc_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake67xklnc.dfs.core.windows.net"
		},
		"asakeyvault67xklnc_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvault67xklnc.vault.azure.net/"
		},
		"asaworkspace67xklnc-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalake67xklnc.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Copy December Sales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "TRUNCATE TABLE wwi_perf.Sale_Heap",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 8,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TransactionId",
											"type": "String"
										},
										"sink": {
											"name": "TransactionId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProductId",
											"type": "Int16"
										},
										"sink": {
											"name": "ProductId",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "SByte"
										},
										"sink": {
											"name": "Quantity",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal"
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "Int32"
										},
										"sink": {
											"name": "TransactionDateId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProfitAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "ProfitAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Hour",
											"type": "SByte"
										},
										"sink": {
											"name": "Hour",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Minute",
											"type": "SByte"
										},
										"sink": {
											"name": "Minute",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "StoreId",
											"type": "Int16"
										},
										"sink": {
											"name": "StoreId",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "asal400_december_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asal400_saleheap_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-11T20:11:19Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_december_sales')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_saleheap_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/User Profiles to Datalake')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "user_profiles_to_datalake",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "user_profiles_to_datalake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcommerceUserProfiles": {},
									"UserProfiles": {},
									"DataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Calculate Top 5 Products",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "user_profiles_to_datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Calculate Top 5 Products",
								"type": "NotebookReference"
							},
							"parameters": {
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-12T19:35:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/user_profiles_to_datalake')]",
				"[concat(variables('workspaceId'), '/notebooks/Calculate Top 5 Products')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Write Campaign Analytics to ASA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "asal400_lab2_writecampaignanalyticstoasa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "asal400_lab2_writecampaignanalyticstoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CampaignAnalytics": {},
									"CampaignAnalyticsASA": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-12T15:10:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/asal400_lab2_writecampaignanalyticstoasa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Write User Profile Data to ASA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "write_user_profile_to_asa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "write_user_profile_to_asa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcommerceUserProfiles": {},
									"UserProfiles": {},
									"UserTopProductPurchasesASA": {},
									"DataLake": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asadatalake67xklnc",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/userprofiles"
							},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-12T16:58:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/write_user_profile_to_asa')]",
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_campaign_analytics_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalake67xklnc",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "campaignanalytics.csv",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_customerprofile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"productReviews": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"reviewText": {
										"type": "string"
									},
									"reviewDate": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_december_sales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalake67xklnc",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-20161230-snappy.parquet",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_ecommerce_userprofiles_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalake67xklnc",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online-user-profiles-02",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"visitorId": {
							"type": "integer"
						},
						"topProductPurchases": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"itemsPurchasedLast12Months": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_saleheap_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_import01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi_perf",
					"table": "Sale_Heap"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_import01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_campaign_analytics_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "CampaignAnalytics"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_usertopproductpurchases_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ItemsPurchasedLast12Months",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsTopProduct",
						"type": "bit"
					},
					{
						"name": "IsPreferredProduct",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserTopProductPurchases"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asacosmosdb01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('asacosmosdb01_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalake67xklnc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalake67xklnc_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalake67xklnc_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvault67xklnc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvault67xklnc_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastore67xklnc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastore67xklnc_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace67xklnc-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspace67xklnc-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspace67xklnc-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspace67xklnc-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault67xklnc",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_highperf')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_highperf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault67xklnc",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_import01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_import01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault67xklnc",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault67xklnc",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload02')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload02_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvault67xklnc",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvault67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_lab2_writecampaignanalyticstoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_campaign_analytics_source",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalytics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asal400_wwi_campaign_analytics_asa",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalyticsASA"
						}
					],
					"transformations": [
						{
							"name": "MapCampaignAnalytics"
						},
						{
							"name": "ConvertColumnTypesAndValues"
						},
						{
							"name": "SelectCampaignAnalyticsColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {_col0_} as string,",
						"          {_col1_} as string,",
						"          {_col2_} as string,",
						"          {_col3_} as string,",
						"          {_col4_} as string,",
						"          {_col5_} as double,",
						"          {_col6_} as string,",
						"          {_col7_} as double,",
						"          {_col8_} as string,",
						"          {_col9_} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     skipLines: 1) ~> CampaignAnalytics",
						"CampaignAnalytics select(mapColumn(",
						"          Region = {_col0_},",
						"          Country = {_col1_},",
						"          ProductCategory = {_col2_},",
						"          CampaignName = {_col3_},",
						"          RevenuePart1 = {_col4_},",
						"          Revenue = {_col5_},",
						"          RevenueTargetPart1 = {_col6_},",
						"          RevenueTarget = {_col7_},",
						"          City = {_col8_},",
						"          State = {_col9_}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MapCampaignAnalytics",
						"MapCampaignAnalytics derive(Revenue = toDecimal(replace(concat(toString(RevenuePart1), toString(Revenue)), '\\\\', ''), 10, 2, '$###,###.##'),",
						"          RevenueTarget = toDecimal(replace(concat(toString(RevenueTargetPart1), toString(RevenueTarget)), '\\\\', ''), 10, 2, '$###,###.##')) ~> ConvertColumnTypesAndValues",
						"ConvertColumnTypesAndValues select(mapColumn(",
						"          Region,",
						"          Country,",
						"          ProductCategory,",
						"          CampaignName,",
						"          Revenue,",
						"          RevenueTarget,",
						"          City,",
						"          State",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCampaignAnalyticsColumns",
						"SelectCampaignAnalyticsColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Region as string,",
						"          Country as string,",
						"          ProductCategory as string,",
						"          CampaignName as string,",
						"          Revenue as decimal(10,2),",
						"          RevenueTarget as decimal(10,2),",
						"          City as string,",
						"          State as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CampaignAnalyticsASA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_campaign_analytics_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_wwi_campaign_analytics_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/user_profiles_to_datalake')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_ecommerce_userprofiles_source",
								"type": "DatasetReference"
							},
							"name": "EcommerceUserProfiles"
						},
						{
							"dataset": {
								"referenceName": "asal400_customerprofile_cosmosdb",
								"type": "DatasetReference"
							},
							"name": "UserProfiles"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "asadatalake67xklnc",
								"type": "LinkedServiceReference"
							},
							"name": "DataLake"
						}
					],
					"transformations": [
						{
							"name": "userId"
						},
						{
							"name": "UserTopProducts"
						},
						{
							"name": "DerivedProductColumns"
						},
						{
							"name": "UserPreferredProducts"
						},
						{
							"name": "JoinTopProductsWithPreferredProducts"
						},
						{
							"name": "DerivedColumnsForMerge"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tvisitorId as string,\n\t\ttopProductPurchases as (productId as string, itemsPurchasedLast12Months as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments',\n\twildcardPaths:['online-user-profiles-02/*.json']) ~> EcommerceUserProfiles\nsource(output(\n\t\tcartId as string,\n\t\tpreferredProducts as integer[],\n\t\tproductReviews as (productId as integer, reviewDate as string, reviewText as string)[],\n\t\tuserId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document') ~> UserProfiles\nEcommerceUserProfiles derive(visitorId = toInteger(visitorId)) ~> userId\nuserId foldDown(unroll(topProductPurchases),\n\tmapColumn(\n\t\tvisitorId,\n\t\tproductId = topProductPurchases.productId,\n\t\titemsPurchasedLast12Months = topProductPurchases.itemsPurchasedLast12Months\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserTopProducts\nUserTopProducts derive(productId = toInteger(productId),\n\t\titemsPurchasedLast12Months = toInteger(itemsPurchasedLast12Months)) ~> DerivedProductColumns\nUserProfiles foldDown(unroll(preferredProducts),\n\tmapColumn(\n\t\tpreferredProductId = preferredProducts,\n\t\tuserId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserPreferredProducts\nDerivedProductColumns, UserPreferredProducts join(visitorId == userId,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tpartitionBy('hash', 30,\n\t\tproductId\n\t),\n\tbroadcast: 'left')~> JoinTopProductsWithPreferredProducts\nJoinTopProductsWithPreferredProducts derive(isTopProduct = toBoolean(iif(isNull(productId), 'false', 'true')),\n\t\tisPreferredProduct = toBoolean(iif(isNull(preferredProductId), 'false', 'true')),\n\t\tproductId = iif(isNull(productId), preferredProductId, productId),\n\t\tuserId = iif(isNull(userId), visitorId, userId)) ~> DerivedColumnsForMerge\nDerivedColumnsForMerge filter(!isNull(productId)) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'wwi-02',\n\tfolderPath: 'top-products',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tvisitorId,\n\t\tproductId,\n\t\titemsPurchasedLast12Months,\n\t\tpreferredProductId,\n\t\tuserId,\n\t\tisTopProduct,\n\t\tisPreferredProduct\n\t)) ~> DataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_ecommerce_userprofiles_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_customerprofile_cosmosdb')]",
				"[concat(variables('workspaceId'), '/linkedServices/asadatalake67xklnc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/write_user_profile_to_asa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_ecommerce_userprofiles_source",
								"type": "DatasetReference"
							},
							"name": "EcommerceUserProfiles"
						},
						{
							"dataset": {
								"referenceName": "asal400_customerprofile_cosmosdb",
								"type": "DatasetReference"
							},
							"name": "UserProfiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asal400_wwi_usertopproductpurchases_asa",
								"type": "DatasetReference"
							},
							"name": "UserTopProductPurchasesASA"
						},
						{
							"linkedService": {
								"referenceName": "asaworkspace67xklnc-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "DataLake"
						}
					],
					"transformations": [
						{
							"name": "userId"
						},
						{
							"name": "UserTopProducts"
						},
						{
							"name": "DeriveProductColumns"
						},
						{
							"name": "UserPreferredProducts"
						},
						{
							"name": "JoinTopProductsWithPreferredProducts"
						},
						{
							"name": "DerivedColumnsForMergeisTopProductc"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          visitorId as integer,",
						"          topProductPurchases as (productId as integer, itemsPurchasedLast12Months as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments',",
						"     wildcardPaths:['online-user-profiles-02/*.json']) ~> EcommerceUserProfiles",
						"source(output(",
						"          cartId as string,",
						"          preferredProducts as integer[],",
						"          productReviews as (productId as integer, reviewDate as string, reviewText as string)[],",
						"          userId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> UserProfiles",
						"EcommerceUserProfiles derive(visitorId = toInteger(visitorId)) ~> userId",
						"userId foldDown(unroll(topProductPurchases),",
						"     mapColumn(",
						"          visitorId,",
						"          productId = topProductPurchases.productId,",
						"          itemsPurchasedLast12Months = topProductPurchases.itemsPurchasedLast12Months",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> UserTopProducts",
						"UserTopProducts derive(productId = toInteger(productId),",
						"          itemsPurchasedLast12Months = toInteger(itemsPurchasedLast12Months)) ~> DeriveProductColumns",
						"UserProfiles foldDown(unroll(preferredProducts),",
						"     mapColumn(",
						"          preferredProductId = preferredProducts,",
						"          userId",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> UserPreferredProducts",
						"DeriveProductColumns, UserPreferredProducts join(visitorId == userId,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 30,",
						"          productId",
						"     ),",
						"     broadcast: 'left')~> JoinTopProductsWithPreferredProducts",
						"JoinTopProductsWithPreferredProducts derive(isTopProduct = toBoolean(iif(isNull(productId), 'false', 'true')),",
						"          isPreferredProduct = toBoolean(iif(isNull(preferredProductId), 'false', 'true')),",
						"          productId = iif(isNull(productId), preferredProductId, productId),",
						"          userId = iif(isNull(userId), visitorId, userId)) ~> DerivedColumnsForMergeisTopProductc",
						"DerivedColumnsForMergeisTopProductc filter(!isNull(productId)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          UserId as integer,",
						"          ProductId as integer,",
						"          ItemsPurchasedLast12Months as integer,",
						"          IsTopProduct as boolean,",
						"          IsPreferredProduct as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          UserId = userId,",
						"          ProductId = productId,",
						"          ItemsPurchasedLast12Months = itemsPurchasedLast12Months,",
						"          IsTopProduct = isTopProduct,",
						"          IsPreferredProduct = isPreferredProduct",
						"     )) ~> UserTopProductPurchasesASA",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'wwi-02',",
						"     folderPath: 'top-products',",
						"     truncate:true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          visitorId,",
						"          productId,",
						"          itemsPurchasedLast12Months,",
						"          preferredProductId,",
						"          userId,",
						"          isTopProduct,",
						"          isPreferredProduct",
						"     )) ~> DataLake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_ecommerce_userprofiles_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_customerprofile_cosmosdb')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_wwi_usertopproductpurchases_asa')]",
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspace67xklnc-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\r\n        It ensures column level security by restricting column access to protect sensitive data. */\r\n\r\n    /* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\r\n        data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\r\n        in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\r\n        Revenue column to DataAnalystMiami */\r\n\r\n    --Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\r\n    select  Top 100 * from wwi_Security.Sale\r\n    where City is not null and state is not null\r\n\r\n    /*  Consider a scenario where there are two users.\r\n        A CEO, who is an authorized  personnel with access to all the information in the database\r\n        and a Data Analyst, to whom only required information should be presented.*/\r\n\r\n    -- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\r\n    SELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\r\n    SELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\r\n\r\n\r\n    -- Step:3 Now let us enforce column level security for the DataAnalystMiami.\r\n    /*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\r\n        The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\r\n    */\r\n\r\n    REVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\r\n    GRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\r\n    -- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\r\n\r\n    -- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\r\n    --  since DataAnalystMiami doesn't have select access to the Revenue column\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select TOP 100 * from wwi_security.Sale;\r\n    ---\r\n    -- The following query will succeed since we are not including the Revenue column in the query.\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\r\n    \r\n    -- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\r\n    Revert;\r\n    GRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\r\n\r\n    -- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\r\n    EXECUTE AS USER ='CEO'\r\n    select * from wwi_security.Sale\r\n    Revert;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\r\n    FS.CustomerID\r\n    ,MIN(FS.Quantity) as MinQuantity\r\n    ,MAX(FS.Quantity) as MaxQuantity\r\n    ,AVG(FS.Price) as AvgPrice\r\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\r\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\r\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\r\nFROM\r\n    wwi_perf.Sale_Heap FS\r\nGROUP BY\r\n    FS.CustomerId",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\r\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\r\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\r\n        Let see how */\r\n\r\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \r\n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\r\n\r\n    -- Step:1 Let us first get a view of CustomerInfo table.\r\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name = 'CustomerInfo';\r\n    -- No results returned verify that no data masking has been done yet.\r\n\r\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\r\n    ALTER TABLE wwi_security.CustomerInfo  \r\n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\r\n    GO\r\n    -- The columns are sucessfully masked.\r\n\r\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name ='CustomerInfo';\r\n\r\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\r\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \r\n\r\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:7 Let us remove the data masking using UNMASK permission\r\n    GRANT UNMASK TO DataAnalystMiami;\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT *\r\n    FROM wwi_security.CustomerInfo;\r\n    revert;\r\n    REVOKE UNMASK TO DataAnalystMiami;  \r\n\r\n    ----step:8 Reverting all the changes back to as it was.\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN CreditCard DROP MASKED;\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email DROP MASKED;\r\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\r\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \r\n\tLet see how we can implement row level security in Azure Synapse.*/\r\n\r\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\r\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \r\n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\r\n--      and DataAnalystSanDiego on the Far West region.\r\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\r\n\r\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\r\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\r\n\r\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\r\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\r\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \r\n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\r\n    whom has access to all data.\r\n*/\r\n\r\n-- Review any existing security predicates in the database\r\nSELECT * FROM sys.security_predicates\r\n\r\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\r\n--  a row should be returned in the parent query.\r\nGO\r\n\r\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \r\n    RETURNS TABLE  \r\nWITH SCHEMABINDING  \r\nAS  \r\n    RETURN SELECT 1 AS fn_securitypredicate_result\r\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\r\nGO\r\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\r\nCREATE SECURITY POLICY SalesFilter  \r\nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\r\nON wwi_security.Sale\r\nWITH (STATE = ON);\r\n\r\n------ Allow SELECT permissions to the Sale Table.------\r\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\r\n\r\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\r\nEXECUTE AS USER = 'DataAnalystMiami' \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\r\n\r\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\r\nEXECUTE AS USER = 'DataAnalystSanDiego';\r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- RLS is working indeed.\r\n\r\n-- Step:5 The CEO should be able to see all rows in the table.\r\nEXECUTE AS USER = 'CEO';  \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- And he can.\r\n\r\n--Step:6 To disable the security policy we just created above, we execute the following.\r\nALTER SECURITY POLICY SalesFilter  \r\nWITH (STATE = OFF);\r\n\r\nDROP SECURITY POLICY SalesFilter;\r\nDROP FUNCTION wwi_security.fn_securitypredicate;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [wwi].[CampaignAnalytics]\n(\n    [Region] [nvarchar](50)  NOT NULL,\n    [Country] [nvarchar](30)  NOT NULL,\n    [ProductCategory] [nvarchar](50)  NOT NULL,\n    [CampaignName] [nvarchar](500)  NOT NULL,\n    [Revenue] [decimal](10,2)  NULL,\n    [RevenueTarget] [decimal](10,2)  NULL,\n    [City] [nvarchar](50)  NULL,\n    [State] [nvarchar](25)  NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [Region] ),\n    CLUSTERED COLUMNSTORE INDEX\n)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/User Profile HTAP')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE master\nGO\n\nIF DB_ID (N'Profiles') IS NULL\nBEGIN\n    CREATE DATABASE Profiles;\nEND\nGO\n\nUSE Profiles\nGO\n\nDROP VIEW IF EXISTS OnlineUserProfile01;\nGO\n\nCREATE VIEW OnlineUserProfile01\nAS\nSELECT\n    *\nFROM OPENROWSET(\n    'CosmosDB',\n    N'account=asacosmosdb67xklnc;database=CustomerProfile;key=o14mk0jRjXobyzy5mv50uYsfOIr9emXUkeGv5T7M52ck5MdUrBQjfIL9367AUT6d5EuFTg1gRDhmNSySJWFOBg==',\n    OnlineUserProfile01\n)\nWITH (\n    userId bigint,\n    cartId varchar(50),\n    preferredProducts varchar(max),\n    productReviews varchar(max)\n) AS profiles\nCROSS APPLY OPENJSON (productReviews)\nWITH (\n    productId bigint,\n    reviewText varchar(1000)\n) AS reviews\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Profiles",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Calculate Top 5 Products')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c7dd0ca8-be05-4c83-a11a-14793f3a2c13"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"7b64f05f-83b2-458b-85ff-d609522f7e9b": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"1": "2717",
												"3": "2717",
												"4": "148",
												"5": "false",
												"6": "true"
											},
											{
												"1": "4002",
												"3": "4002",
												"4": "148",
												"5": "false",
												"6": "true"
											},
											{
												"1": "1716",
												"3": "1716",
												"4": "148",
												"5": "false",
												"6": "true"
											},
											{
												"1": "4520",
												"3": "4520",
												"4": "148",
												"5": "false",
												"6": "true"
											},
											{
												"1": "951",
												"3": "951",
												"4": "148",
												"5": "false",
												"6": "true"
											},
											{
												"1": "1817",
												"3": "1817",
												"4": "148",
												"5": "false",
												"6": "true"
											},
											{
												"1": "2634",
												"3": "2634",
												"4": "463",
												"5": "false",
												"6": "true"
											},
											{
												"1": "2795",
												"3": "2795",
												"4": "463",
												"5": "false",
												"6": "true"
											},
											{
												"1": "1946",
												"3": "1946",
												"4": "471",
												"5": "false",
												"6": "true"
											},
											{
												"1": "4431",
												"3": "4431",
												"4": "471",
												"5": "false",
												"6": "true"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "int"
											},
											{
												"key": "3",
												"name": "preferredProductId",
												"type": "int"
											},
											{
												"key": "4",
												"name": "userId",
												"type": "int"
											},
											{
												"key": "5",
												"name": "isTopProduct",
												"type": "boolean"
											},
											{
												"key": "6",
												"name": "isPreferredProduct",
												"type": "boolean"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e9e3642f-d367-4a55-a303-99ef26cea082/resourceGroups/data-engineering-synapse-67xklnc/providers/Microsoft.Synapse/workspaces/asaworkspace67xklnc/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace67xklnc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/top-products/*.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases = df.select(\r\n",
							"    \"UserId\", \"ProductId\",\r\n",
							"    \"ItemsPurchasedLast12Months\", \"IsTopProduct\",\r\n",
							"    \"IsPreferredProduct\")\r\n",
							"\r\n",
							"# Populate a temporary view so we can query from SQL\r\n",
							"topPurchases.createOrReplaceTempView(\"top_purchases\")\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"topPreferredProducts = (topPurchases\r\n",
							"    .filter( col(\"IsTopProduct\") == True)\r\n",
							"    .filter( col(\"IsPreferredProduct\") == True)\r\n",
							"    .orderBy( col(\"ItemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"topPreferredProducts.show(100)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE OR REPLACE TEMPORARY VIEW top_5_products\r\n",
							"AS\r\n",
							"    select UserId, ProductId, ItemsPurchasedLast12Months\r\n",
							"    from (select *,\r\n",
							"                row_number() over (partition by UserId order by ItemsPurchasedLast12Months desc) as seqnum\r\n",
							"        from top_purchases\r\n",
							"        ) a\r\n",
							"    where seqnum <= 5 and IsTopProduct == true and IsPreferredProduct = true\r\n",
							"    order by a.UserId"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"top5Products = sqlContext.table(\"top_5_products\")\r\n",
							"\r\n",
							"top5Products.show(100)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print('before filter: ', topPreferredProducts.count(), ', after filter: ', top5Products.count())"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"top5ProductsOverall = (top5Products.select(\"ProductId\",\"ItemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"ProductId\")\r\n",
							"    .agg( sum(\"ItemsPurchasedLast12Months\").alias(\"Total\") )\r\n",
							"    .orderBy( col(\"Total\").desc() )\r\n",
							"    .limit(5))\r\n",
							"\r\n",
							"top5ProductsOverall.show()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"import uuid\r\n",
							"\r\n",
							"# Generate random GUID\r\n",
							"runId = uuid.uuid4()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5ProductsOverall.write.parquet('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/top5-products/' + str(runId) + '.parquet')"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Explore with Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "58135020-d3cf-46ca-b293-05181002dbe6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"3f7e3ab3-ada5-4452-bf49-cf684dd496e0": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1c97cc49-d769-4cf7-8c5f-ae7be8c6cbf9",
												"1": "91427",
												"2": "2731",
												"3": "2",
												"4": "29.29",
												"5": "64.438",
												"6": "20170501",
												"7": "21.406",
												"8": "11",
												"9": "9",
												"10": "3516"
											},
											{
												"0": "1c97cc49-d769-4cf7-8c5f-ae7be8c6cbf9",
												"1": "91427",
												"2": "2440",
												"3": "1",
												"4": "19.33",
												"5": "21.263",
												"6": "20170501",
												"7": "5.665",
												"8": "11",
												"9": "9",
												"10": "3516"
											},
											{
												"0": "1c97cc49-d769-4cf7-8c5f-ae7be8c6cbf9",
												"1": "91427",
												"2": "3514",
												"3": "3",
												"4": "34.78",
												"5": "114.774",
												"6": "20170501",
												"7": "37.323",
												"8": "11",
												"9": "9",
												"10": "3516"
											},
											{
												"0": "1c97cc49-d769-4cf7-8c5f-ae7be8c6cbf9",
												"1": "91427",
												"2": "213",
												"3": "4",
												"4": "29.07",
												"5": "127.908",
												"6": "20170501",
												"7": "32.208",
												"8": "11",
												"9": "9",
												"10": "3516"
											},
											{
												"0": "1c97cc49-d769-4cf7-8c5f-ae7be8c6cbf9",
												"1": "91427",
												"2": "167",
												"3": "4",
												"4": "28.69",
												"5": "126.236",
												"6": "20170501",
												"7": "41.096",
												"8": "11",
												"9": "9",
												"10": "3516"
											},
											{
												"0": "1c97cc49-d769-4cf7-8c5f-ae7be8c6cbf9",
												"1": "91427",
												"2": "50",
												"3": "3",
												"4": "25.46",
												"5": "84.018",
												"6": "20170501",
												"7": "22.209",
												"8": "11",
												"9": "9",
												"10": "3516"
											},
											{
												"0": "3ea01928-6185-40af-bc37-483da893adad",
												"1": "91431",
												"2": "1710",
												"3": "1",
												"4": "26.04",
												"5": "28.644",
												"6": "20170501",
												"7": "7.26",
												"8": "11",
												"9": "18",
												"10": "2818"
											},
											{
												"0": "3ea01928-6185-40af-bc37-483da893adad",
												"1": "91431",
												"2": "2412",
												"3": "1",
												"4": "26.76",
												"5": "29.436",
												"6": "20170501",
												"7": "9.185",
												"8": "11",
												"9": "18",
												"10": "2818"
											},
											{
												"0": "3ea01928-6185-40af-bc37-483da893adad",
												"1": "91431",
												"2": "3442",
												"3": "2",
												"4": "25.99",
												"5": "57.178",
												"6": "20170501",
												"7": "21.23",
												"8": "11",
												"9": "18",
												"10": "2818"
											},
											{
												"0": "3ea01928-6185-40af-bc37-483da893adad",
												"1": "91431",
												"2": "2474",
												"3": "4",
												"4": "28.11",
												"5": "123.684",
												"6": "20170501",
												"7": "44.924",
												"8": "11",
												"9": "18",
												"10": "2818"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "int"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "int"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "double"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "double"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "double"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "int"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "int"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "int"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"58c2bd49-d465-46ce-ba7a-510d47dcdbf0": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											null,
											{
												"0": "3",
												"1": "2641"
											},
											{
												"0": "3",
												"1": "1365"
											},
											{
												"0": "3",
												"1": "110"
											},
											{
												"0": "3",
												"1": "220"
											},
											{
												"0": "3",
												"1": "4581"
											},
											{
												"0": "3",
												"1": "2"
											},
											{
												"0": "11",
												"1": "3323"
											},
											{
												"0": "11",
												"1": "70"
											},
											{
												"0": "11",
												"1": "32"
											},
											{
												"0": "11",
												"1": "194"
											},
											{
												"0": "11",
												"1": "4070"
											},
											{
												"0": "11",
												"1": "4763"
											},
											{
												"0": "11",
												"1": "582"
											},
											{
												"0": "41",
												"1": "4660"
											},
											{
												"0": "41",
												"1": "88"
											},
											{
												"0": "41",
												"1": "3564"
											},
											{
												"0": "41",
												"1": "186"
											},
											{
												"0": "41",
												"1": "3321"
											},
											{
												"0": "41",
												"1": "84"
											},
											{
												"0": "41",
												"1": "134"
											},
											{
												"0": "41",
												"1": "244"
											},
											{
												"0": "41",
												"1": "2726"
											},
											{
												"0": "41",
												"1": "3009"
											},
											{
												"0": "41",
												"1": "1091"
											},
											{
												"0": "41",
												"1": "126"
											},
											{
												"0": "42",
												"1": "3256"
											},
											{
												"0": "42",
												"1": "4544"
											},
											{
												"0": "42",
												"1": "229"
											},
											{
												"0": "42",
												"1": "2836"
											},
											{
												"0": "42",
												"1": "57"
											},
											{
												"0": "42",
												"1": "4843"
											},
											{
												"0": "42",
												"1": "2996"
											},
											{
												"0": "42",
												"1": "35"
											},
											{
												"0": "43",
												"1": "412"
											},
											{
												"0": "43",
												"1": "4220"
											},
											{
												"0": "43",
												"1": "3478"
											},
											{
												"0": "43",
												"1": "2776"
											},
											{
												"0": "43",
												"1": "2031"
											},
											{
												"0": "43",
												"1": "153"
											},
											{
												"0": "43",
												"1": "30"
											},
											{
												"0": "52",
												"1": "609"
											},
											{
												"0": "52",
												"1": "3604"
											},
											{
												"0": "52",
												"1": "619"
											},
											{
												"0": "52",
												"1": "209"
											},
											{
												"0": "52",
												"1": "160"
											},
											{
												"0": "52",
												"1": "2711"
											},
											{
												"0": "52",
												"1": "4830"
											},
											{
												"0": "52",
												"1": "686"
											},
											{
												"0": "52",
												"1": "18"
											},
											{
												"0": "52",
												"1": "4260"
											},
											{
												"0": "61",
												"1": "176"
											},
											{
												"0": "61",
												"1": "3663"
											},
											{
												"0": "61",
												"1": "112"
											},
											{
												"0": "61",
												"1": "1302"
											},
											{
												"0": "61",
												"1": "1329"
											},
											{
												"0": "61",
												"1": "2482"
											},
											{
												"0": "61",
												"1": "2655"
											},
											{
												"0": "61",
												"1": "4196"
											},
											{
												"0": "61",
												"1": "2751"
											},
											{
												"0": "61",
												"1": "2430"
											},
											{
												"0": "61",
												"1": "37"
											},
											{
												"0": "64",
												"1": "48"
											},
											{
												"0": "64",
												"1": "2551"
											},
											{
												"0": "64",
												"1": "3039"
											},
											{
												"0": "64",
												"1": "263"
											},
											{
												"0": "64",
												"1": "2229"
											},
											{
												"0": "64",
												"1": "3779"
											},
											{
												"0": "64",
												"1": "3352"
											},
											{
												"0": "64",
												"1": "1140"
											},
											{
												"0": "64",
												"1": "169"
											},
											{
												"0": "64",
												"1": "2240"
											},
											{
												"0": "64",
												"1": "1397"
											},
											{
												"0": "64",
												"1": "1447"
											},
											{
												"0": "70",
												"1": "1911"
											},
											{
												"0": "70",
												"1": "4109"
											},
											{
												"0": "70",
												"1": "226"
											},
											{
												"0": "70",
												"1": "3645"
											},
											{
												"0": "70",
												"1": "1564"
											},
											{
												"0": "70",
												"1": "3514"
											},
											{
												"0": "70",
												"1": "1189"
											},
											{
												"0": "70",
												"1": "19"
											},
											{
												"0": "70",
												"1": "2549"
											},
											{
												"0": "70",
												"1": "2648"
											},
											{
												"0": "70",
												"1": "4317"
											},
											{
												"0": "88",
												"1": "808"
											},
											{
												"0": "88",
												"1": "3231"
											},
											{
												"0": "88",
												"1": "1604"
											},
											{
												"0": "88",
												"1": "172"
											},
											{
												"0": "88",
												"1": "3004"
											},
											{
												"0": "88",
												"1": "7"
											},
											{
												"0": "88",
												"1": "3551"
											},
											{
												"0": "88",
												"1": "2461"
											},
											{
												"0": "88",
												"1": "1062"
											},
											{
												"0": "91",
												"1": "6"
											},
											{
												"0": "91",
												"1": "1271"
											},
											{
												"0": "91",
												"1": "2465"
											},
											{
												"0": "91",
												"1": "607"
											},
											{
												"0": "91",
												"1": "2995"
											},
											{
												"0": "91",
												"1": "4622"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "int"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"4d1f08da-204e-49ac-ab09-3772481af6bc": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "610",
												"3": "4",
												"4": "35.790000000000000000",
												"5": "157.4760000000000127151622564",
												"6": "20170502",
												"7": "53.63600000000000433075797446",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "1321",
												"3": "3",
												"4": "22.080000000000000000",
												"5": "72.86400000000000588329385209",
												"6": "20170502",
												"7": "19.66800000000000158806301442",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "4364",
												"3": "1",
												"4": "16.150000000000000000",
												"5": "17.76500000000000143440814782",
												"6": "20170502",
												"7": "5.896000000000000476063632959",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "4691",
												"3": "2",
												"4": "35.840000000000000000",
												"5": "78.84800000000000636646291241",
												"6": "20170502",
												"7": "24.20000000000000195399252334",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "4691",
												"3": "3",
												"4": "35.840000000000000000",
												"5": "118.2720000000000095496943686",
												"6": "20170502",
												"7": "36.30000000000000293098878501",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "2392",
												"3": "1",
												"4": "32.900000000000000000",
												"5": "36.19000000000000292210700081",
												"6": "20170502",
												"7": "10.41700000000000084110496346",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "1347",
												"3": "2",
												"4": "21.810000000000000000",
												"5": "47.98200000000000387423426673",
												"6": "20170502",
												"7": "12.82600000000000103561603737",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "402",
												"3": "2",
												"4": "25.090000000000000000",
												"5": "55.19800000000000445687931006",
												"6": "20170502",
												"7": "12.84800000000000103739239421",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "56",
												"3": "3",
												"4": "33.300000000000000000",
												"5": "109.8900000000000088729024128",
												"6": "20170502",
												"7": "29.43600000000000237676545112",
												"8": "23",
												"9": "17",
												"10": "9559"
											},
											{
												"0": "586682a8-db73-4e45-a376-c7553a44b248",
												"1": "2",
												"2": "157",
												"3": "2",
												"4": "28.870000000000000000",
												"5": "63.51400000000000512834219535",
												"6": "20170502",
												"7": "14.43200000000000116529008665",
												"8": "23",
												"9": "17",
												"10": "9559"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "string"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "string"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "string"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "string"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "string"
											},
											{
												"key": "6",
												"name": "TransactionDateId",
												"type": "string"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "string"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "string"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "string"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e9e3642f-d367-4a55-a303-99ef26cea082/resourceGroups/data-engineering-synapse-67xklnc/providers/Microsoft.Synapse/workspaces/asaworkspace67xklnc/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace67xklnc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Exploring and fixing data with Synapse Spark\r\n",
							"\r\n",
							"In this task, you will use a Synapse Spark notebook to explore a few of the files in the **wwi-02/sale-poc** folder in the data lake. You will also use Python code to fix the issues with the **sale-20170502.csv** file.\r\n",
							"\r\n",
							"1. First, attach this notebook to the **SparkPool01** Spark pool.\r\n",
							"2. In the code cell below, replace **asadatalake*SUFFIX*** `with the name of the primary data lake storage account associated with your Syanpse workspace. Then execute the cell by selecting the **Run cell** button that becomes visible when you select the cell.\r\n",
							"\r\n",
							"> **Note**: The cell may take some time to run because the spark cluster must be started."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"adls_account_name = 'asadatalake67xklnc'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploring files with Spark\r\n",
							"\r\n",
							"1. The first step in exploring data using Synapse Spark is to load a file from the data lake. For this, we'll use the **spark.read.load()** method of the **SparkSession** to load the **sale-20170501.csv** file into a [DataFrame](https://spark.apache.org/docs/2.2.0/sql-programming-guide.html#datasets-and-dataframes).\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# First, load the file `sale-20170501.csv` file, which we know from our previous exploration to be formatted correctly.\r\n",
							"# Note the use of the `header` and `inferSchema` parameters. Header indicates the first row of the file contains column headers,\r\n",
							"# and `inferSchema` instruct Spark to use data within the file to infer data types.\r\n",
							"df = spark.read.load(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170501.csv', format='csv', header=True, inferSchema=True)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## View the contents of the DataFrame\r\n",
							"\r\n",
							"With the data from the **sale-20170501.csv** file loaded into a data frame, we can now use various methods of a data frame to explore the properties of the data.\r\n",
							"\r\n",
							"1. Let's look at the data as it was imported. Execute the cell below to view and inspect the data in the data frame."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"CustomerId"
									],
									"yLabel": "CustomerId",
									"xLabel": "TransactionId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"CustomerId\":{\"cdd2ed88-8aae-4295-884a-ac4d40c3c33c\":44,\"e067fc11-e07d-4517-bc93-f7dc4b44f35e\":18}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"2. Like we saw during exploration with the SQL on-demand capabilities of Azure Synapse, Spark allows us to view and query against the data contained within files. \r\n",
							"\r\n",
							"3. Now, use the **printSchema()** method of the data frame to view the results of using the **inferSchema** parameter when creating the data frame. Execute the cell below and observe the output."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Now, print the inferred schema. We will need this information below to help with the missing headers in the May 2, 2017 file.\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. The **printSchema** method outputs both field names and data types that are based on the Spark engine's evaluation of the data contained within each field.\r\n",
							"\r\n",
							"    > We can use this information later to help define the schema for the poorly formed **sale-20170502.csv** file. In addition to the field names and data types, we should note the number of features or columns contained in the file. In this case, note that there are 11 fields. That will be used to determine where to split the single row of data.\r\n",
							"\r\n",
							"5. As an example of further exploration we can do, run the cell below to create and display a new data frame that contains an ordered list of distinct Customer and Product Id pairings. We can use these types of functions to find invalid or empty values quickly in targeted fields."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"\":189206}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Create a new data frame containing a list of distinct CustomerId and ProductId values in descending order of the CustomerId.\r\n",
							"df_distinct_products = df.select('CustomerId', 'ProductId').distinct().orderBy('CustomerId')\r\n",
							"\r\n",
							"# Display the first 100 rows of the resulting data frame.\r\n",
							"display(df_distinct_products.limit(100))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's attempt to open and explore the **sale-20170502.csv** file using the **load()** method, as we did above."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Next, let's try to read in the May 2, 2017 file using the same `load()` method we used for the first file.\r\n",
							"df = spark.read.load(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502.csv', format='csv')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"7. As we saw in T-SQL, we receive a similar error in Spark that the number of columns processed may have exceeded limit of 20480 columns. To work with the data in this file, we need to use more advanced methods, as you will see in the next section below.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Handling and fixing poorly formed CSV files\r\n",
							"\r\n",
							"> The steps below provide example code for fixing the poorly-formed CSV file, **sale-20170502.csv** we discovered during exploration of the files in the **wwi-02/sale-poc** folder. This is just one of many ways to handle \"fixing\" a poorly-formed CSV file using Spark.\r\n",
							"\r\n",
							"1. To \"fix\" the bad file, we need to take a programmatic approach, using Python to read in the contents of the file and then parse them to put them into the proper shape.\r\n",
							"\r\n",
							"    > To handle the data being in a single row, we can use the **textFile()** method of our **SparkContext** to read the file as a collection of rows into a resilient distributed dataset (RDD). This allows us to get around the errors around the number of columns because we are essentially getting a single string value stored in a single column.\r\n",
							"\r\n",
							"2. Execute the cell below to load the RDD with data from the file."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import the NumPy library. NumPy is a python library used for working with arrays.\r\n",
							"import numpy as np\r\n",
							"\r\n",
							"# Read the CSV file into a resilient distributed dataset (RDD) as a text file. This will read each row of the file into rows in an RDD.\r\n",
							"rdd = sc.textFile(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502.csv')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"3. With the data now stored in an RDD, we can access the first, and only, populated row in the RDD, and split that into individual fields. We know from our inspection of the file in Notepad++ that it all the fields are separated by a comma (,), so let's start by splitting on that to create an array of field values. Execute the cell below to create a data array."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Since we know there is only one row, grab the first row of the RDD and split in on the field delimiter (comma).\r\n",
							"data = rdd.first().split(',')\r\n",
							"\r\n",
							"field_count = len(data)\r\n",
							"# Print out the count of fields read into the array.\r\n",
							"print(field_count)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. By splitting the row on the field delimiter, we created an array of all the individual field values in the file, the count of which you can see above.\n",
							"\n",
							"5. Now, run the cell below to do a quick calculation on the expected number of rows that will be generated by parsing every 11 fields into a single row."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import math\r\n",
							"\r\n",
							"expected_row_count = math.floor(field_count / 11)\r\n",
							"print(f'The expected row count is: {expected_row_count}')"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's create an array to store the data associated with each \"row\".\r\n",
							"\r\n",
							"    > We will set the max_index to the number of columns that are expected in each row. We know from our exploration of other files in the **wwi-02/sale-poc** folder that they contain 11 columns, so that is the value we will set.\r\n",
							"\r\n",
							"7. In addition to setting variables, we will use the cell below to loop through the **data** array and assign every 11 values to a row. By doing this, we are able to \"split\" the data that was once a single row into appropriate rows containing the proper data and columns from the file.\r\n",
							"\r\n",
							"8. Execute the cell below to create an array of rows from the file data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Create an array to store the data associated with each \"row\". Set the max_index to the number of columns that are in each row. This is 11, which we noted above when viewing the schema of the May 1 file.\r\n",
							"row_list = []\r\n",
							"max_index = 11\r\n",
							"\r\n",
							"# Now, we are going to loop through the array of values extracted from the single row of the file and build rows consisting of 11 columns.\r\n",
							"while max_index <= len(data):\r\n",
							"    row = [data[i] for i in np.arange(max_index-11, max_index)]\r\n",
							"    row_list.append(row)\r\n",
							"\r\n",
							"    max_index += 11\r\n",
							"\r\n",
							"print(f'The row array contains {len(row_list)} rows. The expected number of rows was {expected_row_count}.')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"9. The last thing we need to do to be able to work with the file data as rows is to read it into a Spark DataFrame. In the cell below, we use the **createDataFrame()** method to convert the **row_list** array into a data frame, which also adding names for the columns. Column names are based on the schema we observed in the well formatted files in the **wwi-02/sale-poc** directory.\r\n",
							"\r\n",
							"10. Execute the cell below to create a data frame containing row data from the file and then display the first 10 rows."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"TransactionId"
									],
									"yLabel": "TransactionId",
									"xLabel": "TransactionId",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"TransactionId\":{\"5455a4b4-62bd-401a-b5c6-79ea24f30531\":5,\"a4116581-5aad-416a-b767-aefa516737b1\":5}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Finally, we can use the row_list we created above to create a DataFrame. We can add to this a schema parameter, which contains the column names we saw in the schema of the first file.\r\n",
							"df_fixed = spark.createDataFrame(row_list,schema=['TransactionId', 'CustomerId', 'ProductId', 'Quantity', 'Price', 'TotalAmount', 'TransactionDateId', 'ProfitAmount', 'Hour', 'Minute', 'StoreId'])\r\n",
							"display(df_fixed.limit(10))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write the \"fixed\" file into the data lake\r\n",
							"\r\n",
							"1. The last step we will take as part of our exploration and file fixing process is to write the data back into the data lake, so it can be ingested following the same process as the other files in the **wwi-02/sale-poc** folder.\r\n",
							"\r\n",
							"2. Execute the cell below to save the data frame into the data lake a series of files in a folder named **sale-20170502-fixed**.\r\n",
							"\r\n",
							"    > Note: Spark parallelizes workloads across worker nodes, so when saving files, you will notice they are saved as a collection \"part\" files, and not as a single file. While there are some libraries you can use to create a single file, it is helpful to get used to working with files generated via Spark notebooks as they are natively created.\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_fixed.write.format('csv').option('header',True).mode('overwrite').option('sep',',').save(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502-fixed')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Inspect the fixed file in the data lake\r\n",
							"\r\n",
							"1. With the fixed file written to the data lake, you can quickly inpsect it to verify the files are now formatted properly. Select the **wwi-02** tab above to view the **sale-poc** folder.\r\n",
							"2. Refresh the folder view (expand the **More** menu if necessary) and then open the **sale-20170502-fixed** folder.\r\n",
							"3. In the **sale-20170502-fixed** folder, right-click the first file whose name begins with **part** and whose extension is **.csv** and select **Preview** from the context menu.\r\n",
							"4. In the **Preview** dialog, verify you see the proper columns and that the data looks valid in each field.\r\n",
							"\r\n",
							"## Wrap-up\r\n",
							"\r\n",
							"Throughout this exercise, you used a Spark notebook to explore data stored within files in the data lake. You used Python code to extract data from a poorly formatted CSV file, assemble the data from that file into proper rows, and then write the \"fixed\" file back out into your data lake.\r\n",
							"\r\n",
							"You can now return to the lab guide to continue with the next section of Lab 2.\r\n",
							""
						]
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hyperspace')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "71242fb9-a538-4035-a5bc-d1b751d1fe15"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e9e3642f-d367-4a55-a303-99ef26cea082/resourceGroups/data-engineering-synapse-67xklnc/providers/Microsoft.Synapse/workspaces/asaworkspace67xklnc/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace67xklnc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from hyperspace import *  \r\n",
							"from com.microsoft.hyperspace import *\r\n",
							"from com.microsoft.hyperspace.index import *\r\n",
							"\r\n",
							"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently, Hyperspace indexes utilize SortMergeJoin to speed up query.\r\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\n",
							"\r\n",
							"# Replace the value below with the name of your primary ADLS Gen2 account for your Synapse workspace\r\n",
							"datalake = 'asadatalake67xklnc'\r\n",
							"\r\n",
							"dfSales = spark.read.parquet(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet\")\r\n",
							"dfSales.show(10)\r\n",
							"\r\n",
							"dfCustomers = spark.read.load(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/data-generators/generator-customer-clean.csv\", format=\"csv\", header=True)\r\n",
							"dfCustomers.show(10)\r\n",
							"\r\n",
							"# Create an instance of Hyperspace\r\n",
							"hyperspace = Hyperspace(spark)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#create indexes: each one contains a name, a set of indexed columns and a set of included columns\r\n",
							"indexConfigSales = IndexConfig(\"indexSALES\", [\"CustomerId\"], [\"TotalAmount\"])\r\n",
							"indexConfigCustomers = IndexConfig(\"indexCUSTOMERS\", [\"CustomerId\"], [\"FullName\"])\r\n",
							"\r\n",
							"hyperspace.createIndex(dfSales, indexConfigSales)            # only create index once\r\n",
							"hyperspace.createIndex(dfCustomers, indexConfigCustomers)    # only create index once\r\n",
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 6\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Enable Hyperspace - Hyperspace optimization rules become visible to the Spark optimizer and exploit existing Hyperspace indexes to optimize user queries\r\n",
							"Hyperspace.enable(spark)\r\n",
							"df1 = dfSales.filter(\"\"\"CustomerId = 6\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 6\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"\r\n",
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\r\n",
							"hyperspace.explain(df1, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"eqJoin = dfSales.join(dfCustomers, dfSales.CustomerId == dfCustomers.CustomerId).select(dfSales.TotalAmount, dfCustomers.FullName)\r\n",
							"\r\n",
							"hyperspace.explain(eqJoin, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Disable Hyperspace - Hyperspace rules no longer apply during query optimization. Disabling Hyperspace has no impact on created indexes because they remain intact\r\n",
							"Hyperspace.disable(spark)\r\n",
							"\r\n",
							"hyperspace.deleteIndex(\"indexSALES\")\r\n",
							"hyperspace.vacuumIndex(\"indexSALES\")\r\n",
							"hyperspace.deleteIndex(\"indexCUSTOMERS\")\r\n",
							"hyperspace.vacuumIndex(\"indexCUSTOMERS\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"#\r\n",
							"# Microsoft Spark Utilities\r\n",
							"#\r\n",
							"# https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
							"#\r\n",
							"\r\n",
							"# Azure storage access info\r\n",
							"blob_account_name = datalake\r\n",
							"blob_container_name = 'wwi-02'\r\n",
							"blob_relative_path = '/'\r\n",
							"linkedServiceName = datalake\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linkedServiceName)\r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
							"\r\n",
							"mssparkutils.fs.mkdirs('/SomeNewFolder')\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)"
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Integrating SQL and Spark pools')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4040e28a-c0a2-4662-9ab4-d871b8181ed6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"6bfcc465-a005-46d3-8720-60e55ad417cb": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "829",
												"3": 4,
												"4": "30.500000000000000000",
												"5": "122.000000000000000000",
												"6": "20191231",
												"7": "38.640000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "3683",
												"3": 1,
												"4": "34.440000000000000000",
												"5": "34.440000000000000000",
												"6": "20191231",
												"7": "9.940000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "812",
												"3": 1,
												"4": "28.630000000000000000",
												"5": "28.630000000000000000",
												"6": "20191231",
												"7": "7.200000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "117",
												"3": 2,
												"4": "25.500000000000000000",
												"5": "51.000000000000000000",
												"6": "20191231",
												"7": "15.660000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "406",
												"3": 3,
												"4": "36.590000000000000000",
												"5": "109.770000000000000000",
												"6": "20191231",
												"7": "34.710000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "231",
												"3": 3,
												"4": "25.580000000000000000",
												"5": "76.740000000000000000",
												"6": "20191231",
												"7": "25.020000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2689",
												"3": 3,
												"4": "24.000000000000000000",
												"5": "72.000000000000000000",
												"6": "20191231",
												"7": "19.770000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2095",
												"3": 4,
												"4": "32.380000000000000000",
												"5": "129.520000000000000000",
												"6": "20191231",
												"7": "36.000000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "92",
												"3": 1,
												"4": "15.550000000000000000",
												"5": "15.550000000000000000",
												"6": "20191231",
												"7": "4.730000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "1912",
												"3": 1,
												"4": "24.620000000000000000",
												"5": "24.620000000000000000",
												"6": "20191231",
												"7": "7.390000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"2"
											],
											"seriesFieldKeys": [
												"5"
											],
											"isStacked": false
										}
									}
								}
							},
							"804a6b7e-7a4b-406f-bc2f-bff30d164445": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "20191231",
												"1": "4443",
												"2": "2371.880000000000000000",
												"3": "2.4672",
												"4": "301"
											},
											{
												"0": "20191231",
												"1": "2647",
												"2": "15347.850000000000000000",
												"3": "2.5285",
												"4": "1555"
											},
											{
												"0": "20191231",
												"1": "223",
												"2": "47663.640000000000000000",
												"3": "2.5266",
												"4": "5076"
											},
											{
												"0": "20191231",
												"1": "3977",
												"2": "14202.540000000000000000",
												"3": "2.5668",
												"4": "1594"
											},
											{
												"0": "20191231",
												"1": "4232",
												"2": "9918.700000000000000000",
												"3": "2.4991",
												"4": "1397"
											},
											{
												"0": "20191231",
												"1": "1585",
												"2": "12404.340000000000000000",
												"3": "2.4703",
												"4": "1539"
											},
											{
												"0": "20191231",
												"1": "4646",
												"2": "1975.480000000000000000",
												"3": "2.3604",
												"4": "262"
											},
											{
												"0": "20191231",
												"1": "3036",
												"2": "1150.100000000000000000",
												"3": "2.5481",
												"4": "265"
											},
											{
												"0": "20191231",
												"1": "1620",
												"2": "17613.960000000000000000",
												"3": "2.4777",
												"4": "1613"
											},
											{
												"0": "20191231",
												"1": "669",
												"2": "2422.080000000000000000",
												"3": "2.5043",
												"4": "288"
											},
											{
												"0": "20191231",
												"1": "1655",
												"2": "3088.500000000000000000",
												"3": "2.4786",
												"4": "290"
											},
											{
												"0": "20191231",
												"1": "1527",
												"2": "2148.580000000000000000",
												"3": "2.569",
												"4": "298"
											},
											{
												"0": "20191231",
												"1": "1399",
												"2": "2797.200000000000000000",
												"3": "2.4561",
												"4": "280"
											},
											{
												"0": "20191231",
												"1": "2122",
												"2": "2080.330000000000000000",
												"3": "2.4128",
												"4": "263"
											},
											{
												"0": "20191231",
												"1": "3824",
												"2": "2486.070000000000000000",
												"3": "2.494",
												"4": "207"
											},
											{
												"0": "20191231",
												"1": "4194",
												"2": "1617.840000000000000000",
												"3": "2.4231",
												"4": "252"
											},
											{
												"0": "20191231",
												"1": "863",
												"2": "1860.240000000000000000",
												"3": "2.339",
												"4": "276"
											},
											{
												"0": "20191231",
												"1": "2034",
												"2": "2452.730000000000000000",
												"3": "2.7263",
												"4": "259"
											},
											{
												"0": "20191231",
												"1": "1213",
												"2": "1590.880000000000000000",
												"3": "2.4158",
												"4": "244"
											},
											{
												"0": "20191231",
												"1": "3298",
												"2": "1747.620000000000000000",
												"3": "2.6869",
												"4": "266"
											},
											{
												"0": "20191231",
												"1": "3079",
												"2": "2413.740000000000000000",
												"3": "2.625",
												"4": "294"
											},
											{
												"0": "20191231",
												"1": "3983",
												"2": "14352.280000000000000000",
												"3": "2.554",
												"4": "1609"
											},
											{
												"0": "20191231",
												"1": "2053",
												"2": "2604.000000000000000000",
												"3": "2.6316",
												"4": "300"
											},
											{
												"0": "20191231",
												"1": "4901",
												"2": "6881.940000000000000000",
												"3": "2.5153",
												"4": "1557"
											},
											{
												"0": "20191231",
												"1": "177",
												"2": "52192.600000000000000000",
												"3": "2.486",
												"4": "6404"
											},
											{
												"0": "20191231",
												"1": "4409",
												"2": "1760.260000000000000000",
												"3": "2.5044",
												"4": "283"
											},
											{
												"0": "20191231",
												"1": "1388",
												"2": "3491.800000000000000000",
												"3": "2.5564",
												"4": "340"
											},
											{
												"0": "20191231",
												"1": "4830",
												"2": "2997.360000000000000000",
												"3": "2.4425",
												"4": "276"
											},
											{
												"0": "20191231",
												"1": "3024",
												"2": "3446.300000000000000000",
												"3": "2.6729",
												"4": "286"
											},
											{
												"0": "20191231",
												"1": "3399",
												"2": "1673.600000000000000000",
												"3": "2.6016",
												"4": "320"
											},
											{
												"0": "20191231",
												"1": "4454",
												"2": "1376.160000000000000000",
												"3": "2.4646",
												"4": "244"
											},
											{
												"0": "20191231",
												"1": "4380",
												"2": "2092.230000000000000000",
												"3": "2.4059",
												"4": "243"
											},
											{
												"0": "20191231",
												"1": "4339",
												"2": "1094.450000000000000000",
												"3": "2.3661",
												"4": "265"
											},
											{
												"0": "20191231",
												"1": "454",
												"2": "1937.760000000000000000",
												"3": "2.4673",
												"4": "264"
											},
											{
												"0": "20191231",
												"1": "2216",
												"2": "2635.290000000000000000",
												"3": "2.4953",
												"4": "267"
											},
											{
												"0": "20191231",
												"1": "3335",
												"2": "2432.010000000000000000",
												"3": "2.5392",
												"4": "259"
											},
											{
												"0": "20191231",
												"1": "1960",
												"2": "2259.900000000000000000",
												"3": "2.5596",
												"4": "279"
											},
											{
												"0": "20191231",
												"1": "3310",
												"2": "2214.800000000000000000",
												"3": "2.5",
												"4": "280"
											},
											{
												"0": "20191231",
												"1": "3025",
												"2": "1341.120000000000000000",
												"3": "2.3519",
												"4": "254"
											},
											{
												"0": "20191231",
												"1": "1128",
												"2": "2737.050000000000000000",
												"3": "2.3578",
												"4": "257"
											},
											{
												"0": "20191231",
												"1": "4561",
												"2": "2310.860000000000000000",
												"3": "2.6706",
												"4": "227"
											},
											{
												"0": "20191231",
												"1": "3683",
												"2": "15655.500000000000000000",
												"3": "2.4842",
												"4": "1575"
											},
											{
												"0": "20191231",
												"1": "2592",
												"2": "1564.920000000000000000",
												"3": "2.4059",
												"4": "243"
											},
											{
												"0": "20191231",
												"1": "249",
												"2": "53177.360000000000000000",
												"3": "2.4761",
												"4": "5128"
											},
											{
												"0": "20191231",
												"1": "4755",
												"2": "1670.720000000000000000",
												"3": "2.3402",
												"4": "227"
											},
											{
												"0": "20191231",
												"1": "1608",
												"2": "3161.070000000000000000",
												"3": "2.5259",
												"4": "341"
											},
											{
												"0": "20191231",
												"1": "367",
												"2": "2404.980000000000000000",
												"3": "2.4052",
												"4": "279"
											},
											{
												"0": "20191231",
												"1": "2381",
												"2": "13243.420000000000000000",
												"3": "2.5023",
												"4": "1619"
											},
											{
												"0": "20191231",
												"1": "2206",
												"2": "11490.960000000000000000",
												"3": "2.519",
												"4": "1524"
											},
											{
												"0": "20191231",
												"1": "2724",
												"2": "15377.200000000000000000",
												"3": "2.5085",
												"4": "1480"
											},
											{
												"0": "20191231",
												"1": "4548",
												"2": "20172.880000000000000000",
												"3": "2.4831",
												"4": "1547"
											},
											{
												"0": "20191231",
												"1": "2931",
												"2": "2302.720000000000000000",
												"3": "2.57",
												"4": "257"
											},
											{
												"0": "20191231",
												"1": "996",
												"2": "2077.660000000000000000",
												"3": "2.4259",
												"4": "262"
											},
											{
												"0": "20191231",
												"1": "1402",
												"2": "1653.540000000000000000",
												"3": "2.54",
												"4": "254"
											},
											{
												"0": "20191231",
												"1": "451",
												"2": "1756.860000000000000000",
												"3": "2.6111",
												"4": "282"
											},
											{
												"0": "20191231",
												"1": "4679",
												"2": "2794.140000000000000000",
												"3": "2.5545",
												"4": "258"
											},
											{
												"0": "20191231",
												"1": "4396",
												"2": "2181.590000000000000000",
												"3": "2.5619",
												"4": "269"
											},
											{
												"0": "20191231",
												"1": "3798",
												"2": "2251.530000000000000000",
												"3": "2.7732",
												"4": "269"
											},
											{
												"0": "20191231",
												"1": "2487",
												"2": "9516.780000000000000000",
												"3": "2.4776",
												"4": "1494"
											},
											{
												"0": "20191231",
												"1": "4779",
												"2": "3398.640000000000000000",
												"3": "2.3496",
												"4": "289"
											},
											{
												"0": "20191231",
												"1": "1511",
												"2": "1863.040000000000000000",
												"3": "2.5038",
												"4": "328"
											},
											{
												"0": "20191231",
												"1": "368",
												"2": "2477.230000000000000000",
												"3": "2.4274",
												"4": "301"
											},
											{
												"0": "20191231",
												"1": "1278",
												"2": "3481.590000000000000000",
												"3": "2.5315",
												"4": "281"
											},
											{
												"0": "20191231",
												"1": "1908",
												"2": "3640.800000000000000000",
												"3": "2.8522",
												"4": "328"
											},
											{
												"0": "20191231",
												"1": "3581",
												"2": "2929.340000000000000000",
												"3": "2.547",
												"4": "298"
											},
											{
												"0": "20191231",
												"1": "4041",
												"2": "13716.560000000000000000",
												"3": "2.5168",
												"4": "1573"
											},
											{
												"0": "20191231",
												"1": "237",
												"2": "32047.550000000000000000",
												"3": "2.4902",
												"4": "5095"
											},
											{
												"0": "20191231",
												"1": "692",
												"2": "9760.710000000000000000",
												"3": "2.5155",
												"4": "1459"
											},
											{
												"0": "20191231",
												"1": "57",
												"2": "45311.360000000000000000",
												"3": "2.5441",
												"4": "5312"
											},
											{
												"0": "20191231",
												"1": "2890",
												"2": "12905.430000000000000000",
												"3": "2.5008",
												"4": "1553"
											},
											{
												"0": "20191231",
												"1": "1990",
												"2": "15236.500000000000000000",
												"3": "2.484",
												"4": "1550"
											},
											{
												"0": "20191231",
												"1": "3457",
												"2": "2115.000000000000000000",
												"3": "2.6549",
												"4": "300"
											},
											{
												"0": "20191231",
												"1": "3362",
												"2": "2664.420000000000000000",
												"3": "2.5208",
												"4": "242"
											},
											{
												"0": "20191231",
												"1": "790",
												"2": "2317.030000000000000000",
												"3": "2.5288",
												"4": "263"
											},
											{
												"0": "20191231",
												"1": "2045",
												"2": "3589.950000000000000000",
												"3": "2.4811",
												"4": "263"
											},
											{
												"0": "20191231",
												"1": "1991",
												"2": "1596.120000000000000000",
												"3": "2.4397",
												"4": "283"
											},
											{
												"0": "20191231",
												"1": "2435",
												"2": "3203.820000000000000000",
												"3": "2.5289",
												"4": "306"
											},
											{
												"0": "20191231",
												"1": "518",
												"2": "3602.200000000000000000",
												"3": "2.6496",
												"4": "310"
											},
											{
												"0": "20191231",
												"1": "3194",
												"2": "3461.640000000000000000",
												"3": "2.3481",
												"4": "317"
											},
											{
												"0": "20191231",
												"1": "4955",
												"2": "2159.700000000000000000",
												"3": "2.5868",
												"4": "313"
											},
											{
												"0": "20191231",
												"1": "1645",
												"2": "2120.800000000000000000",
												"3": "2.211",
												"4": "241"
											},
											{
												"0": "20191231",
												"1": "4500",
												"2": "2430.090000000000000000",
												"3": "2.5833",
												"4": "279"
											},
											{
												"0": "20191231",
												"1": "2814",
												"2": "2403.960000000000000000",
												"3": "2.5126",
												"4": "299"
											},
											{
												"0": "20191231",
												"1": "3730",
												"2": "1256.700000000000000000",
												"3": "2.5652",
												"4": "295"
											},
											{
												"0": "20191231",
												"1": "106",
												"2": "63241.800000000000000000",
												"3": "2.4698",
												"4": "6540"
											},
											{
												"0": "20191231",
												"1": "802",
												"2": "15136.400000000000000000",
												"3": "2.4345",
												"4": "1580"
											},
											{
												"0": "20191231",
												"1": "4438",
												"2": "10427.600000000000000000",
												"3": "2.511",
												"4": "1592"
											},
											{
												"0": "20191231",
												"1": "584",
												"2": "20003.760000000000000000",
												"3": "2.5015",
												"4": "1701"
											},
											{
												"0": "20191231",
												"1": "2316",
												"2": "1691.080000000000000000",
												"3": "2.6019",
												"4": "268"
											},
											{
												"0": "20191231",
												"1": "1917",
												"2": "11384.340000000000000000",
												"3": "2.5261",
												"4": "1551"
											},
											{
												"0": "20191231",
												"1": "2752",
												"2": "1852.620000000000000000",
												"3": "2.4063",
												"4": "231"
											},
											{
												"0": "20191231",
												"1": "1863",
												"2": "1796.730000000000000000",
												"3": "2.5566",
												"4": "271"
											},
											{
												"0": "20191231",
												"1": "2514",
												"2": "11996.600000000000000000",
												"3": "2.4959",
												"4": "1540"
											},
											{
												"0": "20191231",
												"1": "4256",
												"2": "2111.200000000000000000",
												"3": "2.5",
												"4": "280"
											},
											{
												"0": "20191231",
												"1": "4797",
												"2": "1216.180000000000000000",
												"3": "2.4536",
												"4": "238"
											},
											{
												"0": "20191231",
												"1": "3254",
												"2": "1958.740000000000000000",
												"3": "2.3564",
												"4": "238"
											},
											{
												"0": "20191231",
												"1": "2305",
												"2": "1716.220000000000000000",
												"3": "2.4907",
												"4": "269"
											},
											{
												"0": "20191231",
												"1": "3354",
												"2": "2633.800000000000000000",
												"3": "2.3009",
												"4": "260"
											},
											{
												"0": "20191231",
												"1": "3424",
												"2": "2713.080000000000000000",
												"3": "2.5794",
												"4": "276"
											},
											{
												"0": "20191231",
												"1": "4338",
												"2": "1946.880000000000000000",
												"3": "2.5263",
												"4": "288"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "2",
												"name": "(sum)ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "(avg)Quantity",
												"type": "double"
											},
											{
												"key": "4",
												"name": "(sum)Quantity",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"9623fae2-1567-4428-9f2b-94321c096c32": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "117880",
												"1": "2809",
												"2": "1"
											},
											{
												"0": "106897",
												"1": "1473",
												"2": "1"
											},
											{
												"0": "117881",
												"1": "606",
												"2": "1"
											},
											{
												"0": "117869",
												"1": "4669",
												"2": "1"
											},
											{
												"0": "117890",
												"1": "4365",
												"2": "1"
											},
											{
												"0": "117006",
												"1": "2874",
												"2": "1"
											},
											{
												"0": "117891",
												"1": "4558",
												"2": "1"
											},
											{
												"0": "117021",
												"1": "1701",
												"2": "1"
											},
											{
												"0": "117923",
												"1": "2071",
												"2": "1"
											},
											{
												"0": "117029",
												"1": "2089",
												"2": "1"
											},
											{
												"0": "117923",
												"1": "415",
												"2": "1"
											},
											{
												"0": "117126",
												"1": "211",
												"2": "1"
											},
											{
												"0": "117935",
												"1": "4454",
												"2": "1"
											},
											{
												"0": "117151",
												"1": "3246",
												"2": "1"
											},
											{
												"0": "117952",
												"1": "4239",
												"2": "1"
											},
											{
												"0": "117157",
												"1": "135",
												"2": "1"
											},
											{
												"0": "117954",
												"1": "2238",
												"2": "1"
											},
											{
												"0": "117169",
												"1": "1367",
												"2": "1"
											},
											{
												"0": "117971",
												"1": "2896",
												"2": "1"
											},
											{
												"0": "117183",
												"1": "3847",
												"2": "1"
											},
											{
												"0": "117977",
												"1": "4456",
												"2": "1"
											},
											{
												"0": "117240",
												"1": "4270",
												"2": "1"
											},
											{
												"0": "106005",
												"1": "2569",
												"2": "1"
											},
											{
												"0": "117244",
												"1": "4851",
												"2": "1"
											},
											{
												"0": "106010",
												"1": "2417",
												"2": "1"
											},
											{
												"0": "117270",
												"1": "503",
												"2": "1"
											},
											{
												"0": "106035",
												"1": "1783",
												"2": "1"
											},
											{
												"0": "117334",
												"1": "3946",
												"2": "1"
											},
											{
												"0": "106035",
												"1": "1046",
												"2": "1"
											},
											{
												"0": "117089",
												"1": "3102",
												"2": "1"
											},
											{
												"0": "106037",
												"1": "3411",
												"2": "1"
											},
											{
												"0": "117044",
												"1": "4323",
												"2": "1"
											},
											{
												"0": "106051",
												"1": "233",
												"2": "1"
											},
											{
												"0": "117039",
												"1": "4327",
												"2": "1"
											},
											{
												"0": "106053",
												"1": "4384",
												"2": "1"
											},
											{
												"0": "117425",
												"1": "1190",
												"2": "1"
											},
											{
												"0": "106057",
												"1": "1495",
												"2": "1"
											},
											{
												"0": "117430",
												"1": "1496",
												"2": "1"
											},
											{
												"0": "106069",
												"1": "98",
												"2": "1"
											},
											{
												"0": "117440",
												"1": "127",
												"2": "1"
											},
											{
												"0": "106069",
												"1": "3879",
												"2": "1"
											},
											{
												"0": "117455",
												"1": "3339",
												"2": "1"
											},
											{
												"0": "106069",
												"1": "1888",
												"2": "1"
											},
											{
												"0": "117460",
												"1": "4468",
												"2": "1"
											},
											{
												"0": "106070",
												"1": "579",
												"2": "1"
											},
											{
												"0": "117471",
												"1": "1830",
												"2": "1"
											},
											{
												"0": "106086",
												"1": "2651",
												"2": "1"
											},
											{
												"0": "117490",
												"1": "2478",
												"2": "1"
											},
											{
												"0": "106091",
												"1": "2541",
												"2": "1"
											},
											{
												"0": "117516",
												"1": "807",
												"2": "1"
											},
											{
												"0": "106097",
												"1": "3869",
												"2": "1"
											},
											{
												"0": "117520",
												"1": "3794",
												"2": "1"
											},
											{
												"0": "106097",
												"1": "4589",
												"2": "1"
											},
											{
												"0": "117536",
												"1": "1055",
												"2": "1"
											},
											{
												"0": "106098",
												"1": "631",
												"2": "1"
											},
											{
												"0": "117565",
												"1": "3205",
												"2": "1"
											},
											{
												"0": "106100",
												"1": "3959",
												"2": "1"
											},
											{
												"0": "117572",
												"1": "4286",
												"2": "1"
											},
											{
												"0": "106107",
												"1": "1199",
												"2": "1"
											},
											{
												"0": "117614",
												"1": "3845",
												"2": "1"
											},
											{
												"0": "106118",
												"1": "1893",
												"2": "1"
											},
											{
												"0": "117618",
												"1": "800",
												"2": "1"
											},
											{
												"0": "106128",
												"1": "1760",
												"2": "1"
											},
											{
												"0": "117621",
												"1": "3269",
												"2": "1"
											},
											{
												"0": "106131",
												"1": "908",
												"2": "1"
											},
											{
												"0": "117622",
												"1": "4744",
												"2": "1"
											},
											{
												"0": "106151",
												"1": "291",
												"2": "1"
											},
											{
												"0": "117632",
												"1": "1173",
												"2": "1"
											},
											{
												"0": "106167",
												"1": "1463",
												"2": "1"
											},
											{
												"0": "117652",
												"1": "4117",
												"2": "1"
											},
											{
												"0": "106175",
												"1": "4258",
												"2": "1"
											},
											{
												"0": "117688",
												"1": "4587",
												"2": "1"
											},
											{
												"0": "106186",
												"1": "865",
												"2": "1"
											},
											{
												"0": "117695",
												"1": "4031",
												"2": "1"
											},
											{
												"0": "106201",
												"1": "4409",
												"2": "1"
											},
											{
												"0": "117757",
												"1": "4511",
												"2": "1"
											},
											{
												"0": "106208",
												"1": "1736",
												"2": "1"
											},
											{
												"0": "117780",
												"1": "138",
												"2": "1"
											},
											{
												"0": "106220",
												"1": "209",
												"2": "1"
											},
											{
												"0": "117803",
												"1": "195",
												"2": "1"
											},
											{
												"0": "106230",
												"1": "148",
												"2": "1"
											},
											{
												"0": "117814",
												"1": "249",
												"2": "1"
											},
											{
												"0": "106233",
												"1": "4552",
												"2": "1"
											},
											{
												"0": "117824",
												"1": "1934",
												"2": "1"
											},
											{
												"0": "106246",
												"1": "1984",
												"2": "1"
											},
											{
												"0": "117830",
												"1": "67",
												"2": "1"
											},
											{
												"0": "106248",
												"1": "1315",
												"2": "1"
											},
											{
												"0": "117842",
												"1": "96",
												"2": "1"
											},
											{
												"0": "106271",
												"1": "1639",
												"2": "1"
											},
											{
												"0": "106403",
												"1": "2895",
												"2": "1"
											},
											{
												"0": "106894",
												"1": "1280",
												"2": "1"
											},
											{
												"0": "106407",
												"1": "2372",
												"2": "1"
											},
											{
												"0": "117395",
												"1": "2673",
												"2": "1"
											},
											{
												"0": "106415",
												"1": "2494",
												"2": "1"
											},
											{
												"0": "117407",
												"1": "2015",
												"2": "1"
											},
											{
												"0": "106418",
												"1": "3856",
												"2": "1"
											},
											{
												"0": "117147",
												"1": "1860",
												"2": "1"
											},
											{
												"0": "106435",
												"1": "2969",
												"2": "1"
											},
											{
												"0": "117373",
												"1": "2064",
												"2": "1"
											},
											{
												"0": "106439",
												"1": "4158",
												"2": "1"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"a0661eb9-bec6-4aac-a89d-860163fb282a": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "117901",
												"1": "444",
												"2": "99"
											},
											{
												"0": "106847",
												"1": "781",
												"2": "99"
											},
											{
												"0": "117914",
												"1": "2002",
												"2": "99"
											},
											{
												"0": "117019",
												"1": "1876",
												"2": "99"
											},
											{
												"0": "117916",
												"1": "4523",
												"2": "99"
											},
											{
												"0": "117044",
												"1": "4502",
												"2": "99"
											},
											{
												"0": "117919",
												"1": "1686",
												"2": "99"
											},
											{
												"0": "117060",
												"1": "1044",
												"2": "99"
											},
											{
												"0": "117930",
												"1": "2590",
												"2": "99"
											},
											{
												"0": "117068",
												"1": "3151",
												"2": "99"
											},
											{
												"0": "117939",
												"1": "3828",
												"2": "99"
											},
											{
												"0": "117084",
												"1": "912",
												"2": "99"
											},
											{
												"0": "117946",
												"1": "511",
												"2": "99"
											},
											{
												"0": "117135",
												"1": "2972",
												"2": "99"
											},
											{
												"0": "117951",
												"1": "593",
												"2": "99"
											},
											{
												"0": "117179",
												"1": "1569",
												"2": "99"
											},
											{
												"0": "117971",
												"1": "37",
												"2": "99"
											},
											{
												"0": "117199",
												"1": "2093",
												"2": "99"
											},
											{
												"0": "117973",
												"1": "1395",
												"2": "99"
											},
											{
												"0": "117231",
												"1": "1757",
												"2": "99"
											},
											{
												"0": "117989",
												"1": "4820",
												"2": "99"
											},
											{
												"0": "117247",
												"1": "2484",
												"2": "99"
											},
											{
												"0": "117991",
												"1": "4362",
												"2": "99"
											},
											{
												"0": "117255",
												"1": "2686",
												"2": "99"
											},
											{
												"0": "117996",
												"1": "4071",
												"2": "99"
											},
											{
												"0": "117284",
												"1": "499",
												"2": "99"
											},
											{
												"0": "117998",
												"1": "3347",
												"2": "99"
											},
											{
												"0": "117287",
												"1": "503",
												"2": "99"
											},
											{
												"0": "106004",
												"1": "3853",
												"2": "99"
											},
											{
												"0": "117301",
												"1": "2087",
												"2": "99"
											},
											{
												"0": "106006",
												"1": "1862",
												"2": "99"
											},
											{
												"0": "117321",
												"1": "4648",
												"2": "99"
											},
											{
												"0": "106011",
												"1": "4345",
												"2": "99"
											},
											{
												"0": "117349",
												"1": "442",
												"2": "99"
											},
											{
												"0": "106013",
												"1": "1720",
												"2": "99"
											},
											{
												"0": "117358",
												"1": "2458",
												"2": "99"
											},
											{
												"0": "106026",
												"1": "3961",
												"2": "99"
											},
											{
												"0": "117376",
												"1": "639",
												"2": "99"
											},
											{
												"0": "106028",
												"1": "2604",
												"2": "99"
											},
											{
												"0": "117381",
												"1": "177",
												"2": "99"
											},
											{
												"0": "106034",
												"1": "4386",
												"2": "99"
											},
											{
												"0": "117404",
												"1": "2068",
												"2": "99"
											},
											{
												"0": "106037",
												"1": "1722",
												"2": "99"
											},
											{
												"0": "117420",
												"1": "1000",
												"2": "99"
											},
											{
												"0": "106038",
												"1": "3367",
												"2": "99"
											},
											{
												"0": "117421",
												"1": "2789",
												"2": "99"
											},
											{
												"0": "106042",
												"1": "1312",
												"2": "99"
											},
											{
												"0": "117423",
												"1": "2067",
												"2": "99"
											},
											{
												"0": "106043",
												"1": "3032",
												"2": "99"
											},
											{
												"0": "117427",
												"1": "2355",
												"2": "99"
											},
											{
												"0": "106047",
												"1": "4330",
												"2": "99"
											},
											{
												"0": "117435",
												"1": "18",
												"2": "99"
											},
											{
												"0": "106051",
												"1": "3441",
												"2": "99"
											},
											{
												"0": "117450",
												"1": "2877",
												"2": "99"
											},
											{
												"0": "106053",
												"1": "4679",
												"2": "99"
											},
											{
												"0": "117515",
												"1": "1863",
												"2": "99"
											},
											{
												"0": "106056",
												"1": "666",
												"2": "99"
											},
											{
												"0": "117582",
												"1": "2404",
												"2": "99"
											},
											{
												"0": "106057",
												"1": "2002",
												"2": "99"
											},
											{
												"0": "117591",
												"1": "4721",
												"2": "99"
											},
											{
												"0": "106059",
												"1": "4276",
												"2": "99"
											},
											{
												"0": "117608",
												"1": "1628",
												"2": "99"
											},
											{
												"0": "106068",
												"1": "1705",
												"2": "99"
											},
											{
												"0": "117620",
												"1": "1806",
												"2": "99"
											},
											{
												"0": "106073",
												"1": "3446",
												"2": "99"
											},
											{
												"0": "117629",
												"1": "4549",
												"2": "99"
											},
											{
												"0": "106079",
												"1": "3508",
												"2": "99"
											},
											{
												"0": "117644",
												"1": "4188",
												"2": "99"
											},
											{
												"0": "106080",
												"1": "2606",
												"2": "99"
											},
											{
												"0": "117689",
												"1": "2760",
												"2": "99"
											},
											{
												"0": "106081",
												"1": "9",
												"2": "99"
											},
											{
												"0": "117705",
												"1": "2535",
												"2": "99"
											},
											{
												"0": "106087",
												"1": "1944",
												"2": "99"
											},
											{
												"0": "117730",
												"1": "4921",
												"2": "99"
											},
											{
												"0": "106088",
												"1": "1376",
												"2": "99"
											},
											{
												"0": "117752",
												"1": "3966",
												"2": "99"
											},
											{
												"0": "106094",
												"1": "4651",
												"2": "99"
											},
											{
												"0": "117801",
												"1": "4299",
												"2": "99"
											},
											{
												"0": "106098",
												"1": "1617",
												"2": "99"
											},
											{
												"0": "117826",
												"1": "4825",
												"2": "99"
											},
											{
												"0": "106100",
												"1": "394",
												"2": "99"
											},
											{
												"0": "117835",
												"1": "2190",
												"2": "99"
											},
											{
												"0": "106103",
												"1": "3491",
												"2": "99"
											},
											{
												"0": "117870",
												"1": "967",
												"2": "99"
											},
											{
												"0": "106138",
												"1": "4254",
												"2": "99"
											},
											{
												"0": "117890",
												"1": "4607",
												"2": "99"
											},
											{
												"0": "106140",
												"1": "1427",
												"2": "99"
											},
											{
												"0": "117892",
												"1": "4263",
												"2": "99"
											},
											{
												"0": "106154",
												"1": "525",
												"2": "99"
											},
											{
												"0": "106231",
												"1": "108",
												"2": "99"
											},
											{
												"0": "106846",
												"1": "4299",
												"2": "99"
											},
											{
												"0": "106233",
												"1": "1209",
												"2": "99"
											},
											{
												"0": "117035",
												"1": "2568",
												"2": "99"
											},
											{
												"0": "106240",
												"1": "4701",
												"2": "99"
											},
											{
												"0": "117068",
												"1": "4441",
												"2": "99"
											},
											{
												"0": "106255",
												"1": "159",
												"2": "99"
											},
											{
												"0": "117087",
												"1": "3490",
												"2": "99"
											},
											{
												"0": "106258",
												"1": "2714",
												"2": "99"
											},
											{
												"0": "117194",
												"1": "4164",
												"2": "99"
											},
											{
												"0": "106283",
												"1": "4745",
												"2": "99"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"34be07ab-5940-4b51-a108-2fca9efa245d": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80000",
												"1": "20"
											},
											{
												"0": "80001",
												"1": "20"
											},
											{
												"0": "80002",
												"1": "15"
											},
											{
												"0": "80003",
												"1": "12"
											},
											{
												"0": "80004",
												"1": "10"
											},
											{
												"0": "80005",
												"1": "13"
											},
											{
												"0": "80006",
												"1": "6"
											},
											{
												"0": "80007",
												"1": "18"
											},
											{
												"0": "80008",
												"1": "4"
											},
											{
												"0": "80009",
												"1": "16"
											},
											{
												"0": "80010",
												"1": "3"
											},
											{
												"0": "80011",
												"1": "17"
											},
											{
												"0": "80012",
												"1": "19"
											},
											{
												"0": "80013",
												"1": "6"
											},
											{
												"0": "80014",
												"1": "20"
											},
											{
												"0": "80015",
												"1": "12"
											},
											{
												"0": "80016",
												"1": "6"
											},
											{
												"0": "80017",
												"1": "1"
											},
											{
												"0": "80018",
												"1": "17"
											},
											{
												"0": "80019",
												"1": "14"
											},
											{
												"0": "80020",
												"1": "9"
											},
											{
												"0": "80021",
												"1": "18"
											},
											{
												"0": "80022",
												"1": "13"
											},
											{
												"0": "80023",
												"1": "10"
											},
											{
												"0": "80024",
												"1": "4"
											},
											{
												"0": "80025",
												"1": "13"
											},
											{
												"0": "80026",
												"1": "19"
											},
											{
												"0": "80027",
												"1": "13"
											},
											{
												"0": "80028",
												"1": "1"
											},
											{
												"0": "80029",
												"1": "4"
											},
											{
												"0": "80030",
												"1": "1"
											},
											{
												"0": "80031",
												"1": "9"
											},
											{
												"0": "80032",
												"1": "17"
											},
											{
												"0": "80033",
												"1": "8"
											},
											{
												"0": "80034",
												"1": "14"
											},
											{
												"0": "80035",
												"1": "11"
											},
											{
												"0": "80036",
												"1": "19"
											},
											{
												"0": "80037",
												"1": "10"
											},
											{
												"0": "80038",
												"1": "3"
											},
											{
												"0": "80039",
												"1": "4"
											},
											{
												"0": "80040",
												"1": "17"
											},
											{
												"0": "80041",
												"1": "6"
											},
											{
												"0": "80042",
												"1": "9"
											},
											{
												"0": "80043",
												"1": "2"
											},
											{
												"0": "80044",
												"1": "19"
											},
											{
												"0": "80045",
												"1": "6"
											},
											{
												"0": "80046",
												"1": "17"
											},
											{
												"0": "80047",
												"1": "4"
											},
											{
												"0": "80048",
												"1": "13"
											},
											{
												"0": "80049",
												"1": "16"
											},
											{
												"0": "80050",
												"1": "5"
											},
											{
												"0": "80051",
												"1": "17"
											},
											{
												"0": "80052",
												"1": "9"
											},
											{
												"0": "80053",
												"1": "4"
											},
											{
												"0": "80054",
												"1": "10"
											},
											{
												"0": "80055",
												"1": "18"
											},
											{
												"0": "80056",
												"1": "13"
											},
											{
												"0": "80057",
												"1": "9"
											},
											{
												"0": "80058",
												"1": "3"
											},
											{
												"0": "80059",
												"1": "14"
											},
											{
												"0": "80060",
												"1": "4"
											},
											{
												"0": "80061",
												"1": "6"
											},
											{
												"0": "80062",
												"1": "19"
											},
											{
												"0": "80063",
												"1": "3"
											},
											{
												"0": "80064",
												"1": "3"
											},
											{
												"0": "80066",
												"1": "4"
											},
											{
												"0": "80067",
												"1": "6"
											},
											{
												"0": "80068",
												"1": "5"
											},
											{
												"0": "80069",
												"1": "11"
											},
											{
												"0": "80070",
												"1": "8"
											},
											{
												"0": "80071",
												"1": "8"
											},
											{
												"0": "80072",
												"1": "5"
											},
											{
												"0": "80073",
												"1": "14"
											},
											{
												"0": "80074",
												"1": "12"
											},
											{
												"0": "80075",
												"1": "7"
											},
											{
												"0": "80076",
												"1": "12"
											},
											{
												"0": "80077",
												"1": "1"
											},
											{
												"0": "80078",
												"1": "6"
											},
											{
												"0": "80079",
												"1": "4"
											},
											{
												"0": "80080",
												"1": "19"
											},
											{
												"0": "80081",
												"1": "14"
											},
											{
												"0": "80082",
												"1": "15"
											},
											{
												"0": "80083",
												"1": "12"
											},
											{
												"0": "80084",
												"1": "5"
											},
											{
												"0": "80086",
												"1": "7"
											},
											{
												"0": "80087",
												"1": "1"
											},
											{
												"0": "80088",
												"1": "2"
											},
											{
												"0": "80089",
												"1": "9"
											},
											{
												"0": "80090",
												"1": "1"
											},
											{
												"0": "80091",
												"1": "10"
											},
											{
												"0": "80092",
												"1": "11"
											},
											{
												"0": "80093",
												"1": "6"
											},
											{
												"0": "80094",
												"1": "19"
											},
											{
												"0": "80095",
												"1": "1"
											},
											{
												"0": "80096",
												"1": "19"
											},
											{
												"0": "80097",
												"1": "19"
											},
											{
												"0": "80098",
												"1": "15"
											},
											{
												"0": "80099",
												"1": "8"
											},
											{
												"0": "80100",
												"1": "11"
											},
											{
												"0": "80101",
												"1": "6"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "total",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"bf258cc0-be40-42f0-bc47-61ca5e8db917": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80000",
												"1": "1054"
											},
											{
												"0": "80001",
												"1": "834"
											},
											{
												"0": "80002",
												"1": "754"
											},
											{
												"0": "80003",
												"1": "684"
											},
											{
												"0": "80004",
												"1": "598"
											},
											{
												"0": "80005",
												"1": "615"
											},
											{
												"0": "80006",
												"1": "348"
											},
											{
												"0": "80007",
												"1": "932"
											},
											{
												"0": "80008",
												"1": "199"
											},
											{
												"0": "80009",
												"1": "787"
											},
											{
												"0": "80010",
												"1": "97"
											},
											{
												"0": "80011",
												"1": "931"
											},
											{
												"0": "80012",
												"1": "1042"
											},
											{
												"0": "80013",
												"1": "313"
											},
											{
												"0": "80014",
												"1": "1084"
											},
											{
												"0": "80015",
												"1": "496"
											},
											{
												"0": "80016",
												"1": "429"
											},
											{
												"0": "80017",
												"1": "76"
											},
											{
												"0": "80018",
												"1": "733"
											},
											{
												"0": "80019",
												"1": "743"
											},
											{
												"0": "80020",
												"1": "502"
											},
											{
												"0": "80021",
												"1": "921"
											},
											{
												"0": "80022",
												"1": "662"
											},
											{
												"0": "80023",
												"1": "461"
											},
											{
												"0": "80024",
												"1": "143"
											},
											{
												"0": "80025",
												"1": "747"
											},
											{
												"0": "80026",
												"1": "909"
											},
											{
												"0": "80027",
												"1": "681"
											},
											{
												"0": "80028",
												"1": "72"
											},
											{
												"0": "80029",
												"1": "227"
											},
											{
												"0": "80030",
												"1": "4"
											},
											{
												"0": "80031",
												"1": "654"
											},
											{
												"0": "80032",
												"1": "877"
											},
											{
												"0": "80033",
												"1": "331"
											},
											{
												"0": "80034",
												"1": "651"
											},
											{
												"0": "80035",
												"1": "496"
											},
											{
												"0": "80036",
												"1": "1045"
											},
											{
												"0": "80037",
												"1": "476"
											},
											{
												"0": "80038",
												"1": "139"
											},
											{
												"0": "80039",
												"1": "211"
											},
											{
												"0": "80040",
												"1": "913"
											},
											{
												"0": "80041",
												"1": "290"
											},
											{
												"0": "80042",
												"1": "427"
											},
											{
												"0": "80043",
												"1": "24"
											},
											{
												"0": "80044",
												"1": "728"
											},
											{
												"0": "80045",
												"1": "314"
											},
											{
												"0": "80046",
												"1": "613"
											},
											{
												"0": "80047",
												"1": "194"
											},
											{
												"0": "80048",
												"1": "708"
											},
											{
												"0": "80049",
												"1": "981"
											},
											{
												"0": "80050",
												"1": "234"
											},
											{
												"0": "80051",
												"1": "788"
											},
											{
												"0": "80052",
												"1": "395"
											},
											{
												"0": "80053",
												"1": "234"
											},
											{
												"0": "80054",
												"1": "391"
											},
											{
												"0": "80055",
												"1": "1137"
											},
											{
												"0": "80056",
												"1": "440"
											},
											{
												"0": "80057",
												"1": "474"
											},
											{
												"0": "80058",
												"1": "50"
											},
											{
												"0": "80059",
												"1": "677"
											},
											{
												"0": "80060",
												"1": "158"
											},
											{
												"0": "80061",
												"1": "212"
											},
											{
												"0": "80062",
												"1": "1009"
											},
											{
												"0": "80063",
												"1": "113"
											},
											{
												"0": "80064",
												"1": "132"
											},
											{
												"0": "80066",
												"1": "141"
											},
											{
												"0": "80067",
												"1": "381"
											},
											{
												"0": "80068",
												"1": "329"
											},
											{
												"0": "80069",
												"1": "524"
											},
											{
												"0": "80070",
												"1": "422"
											},
											{
												"0": "80071",
												"1": "322"
											},
											{
												"0": "80072",
												"1": "352"
											},
											{
												"0": "80073",
												"1": "770"
											},
											{
												"0": "80074",
												"1": "398"
											},
											{
												"0": "80075",
												"1": "185"
											},
											{
												"0": "80076",
												"1": "425"
											},
											{
												"0": "80077",
												"1": "84"
											},
											{
												"0": "80078",
												"1": "383"
											},
											{
												"0": "80079",
												"1": "250"
											},
											{
												"0": "80080",
												"1": "946"
											},
											{
												"0": "80081",
												"1": "540"
											},
											{
												"0": "80082",
												"1": "566"
											},
											{
												"0": "80083",
												"1": "726"
											},
											{
												"0": "80084",
												"1": "257"
											},
											{
												"0": "80086",
												"1": "270"
											},
											{
												"0": "80087",
												"1": "20"
											},
											{
												"0": "80088",
												"1": "27"
											},
											{
												"0": "80089",
												"1": "488"
											},
											{
												"0": "80090",
												"1": "34"
											},
											{
												"0": "80091",
												"1": "314"
											},
											{
												"0": "80092",
												"1": "535"
											},
											{
												"0": "80093",
												"1": "279"
											},
											{
												"0": "80094",
												"1": "937"
											},
											{
												"0": "80095",
												"1": "42"
											},
											{
												"0": "80096",
												"1": "807"
											},
											{
												"0": "80097",
												"1": "984"
											},
											{
												"0": "80098",
												"1": "744"
											},
											{
												"0": "80099",
												"1": "375"
											},
											{
												"0": "80100",
												"1": "510"
											},
											{
												"0": "80101",
												"1": "222"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "totalItemsPurchased",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"10b193b2-f5ad-451d-8ff5-1fee4a6268e8": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "2857",
												"3": 4,
												"4": "20.080000000000000000",
												"5": "80.320000000000000000",
												"6": "20191230",
												"7": "24.000000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "1488",
												"3": 1,
												"4": "26.840000000000000000",
												"5": "26.840000000000000000",
												"6": "20191230",
												"7": "6.610000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "4021",
												"3": 3,
												"4": "31.120000000000000000",
												"5": "93.360000000000000000",
												"6": "20191230",
												"7": "28.110000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "728",
												"3": 1,
												"4": "28.390000000000000000",
												"5": "28.390000000000000000",
												"6": "20191230",
												"7": "9.740000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "3107",
												"3": 1,
												"4": "26.010000000000000000",
												"5": "26.010000000000000000",
												"6": "20191230",
												"7": "7.770000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "2646",
												"3": 2,
												"4": "25.960000000000000000",
												"5": "51.920000000000000000",
												"6": "20191230",
												"7": "13.940000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "2005",
												"3": 2,
												"4": "32.460000000000000000",
												"5": "64.920000000000000000",
												"6": "20191230",
												"7": "17.600000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "2848",
												"3": 4,
												"4": "20.200000000000000000",
												"5": "80.800000000000000000",
												"6": "20191230",
												"7": "28.600000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "248",
												"3": 2,
												"4": "25.490000000000000000",
												"5": "50.980000000000000000",
												"6": "20191230",
												"7": "13.340000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											},
											{
												"0": "6efc5ea6-36f6-4c4c-9129-56be367d9136",
												"1": "1",
												"2": "141",
												"3": 4,
												"4": "22.130000000000000000",
												"5": "88.520000000000000000",
												"6": "20191230",
												"7": "24.480000000000000000",
												"8": 19,
												"9": 38,
												"10": "7405"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"518033c0-3a78-4740-9171-7a4ab1f39f94": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "107993",
												"1": "4625",
												"2": "15"
											},
											{
												"0": "107993",
												"1": "1308",
												"2": "86"
											},
											{
												"0": "107993",
												"1": "3788",
												"2": "83"
											},
											{
												"0": "107993",
												"1": "2544",
												"2": "80"
											},
											{
												"0": "107993",
												"1": "710",
												"2": "43"
											},
											{
												"0": "107993",
												"1": "236",
												"2": "37"
											},
											{
												"0": "107993",
												"1": "1725",
												"2": "30"
											},
											{
												"0": "107993",
												"1": "3430",
												"2": "69"
											},
											{
												"0": "107993",
												"1": "2239",
												"2": "74"
											},
											{
												"0": "107993",
												"1": "3458",
												"2": "50"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"3ba37222-90e6-4428-9e25-c0858563cac5": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80296",
												"1": "202",
												"2": "96.920000000000000000",
												"3": "4",
												"4": "52"
											},
											{
												"0": "80347",
												"1": "4232",
												"2": "48.860000000000000000",
												"3": "2",
												"4": "89"
											},
											{
												"0": "80351",
												"1": "244",
												"2": "83.960000000000000000",
												"3": "4",
												"4": "83"
											},
											{
												"0": "80659",
												"1": "2433",
												"2": "45.520000000000000000",
												"3": "2",
												"4": "63"
											},
											{
												"0": "80922",
												"1": "963",
												"2": "100.680000000000000000",
												"3": "4",
												"4": "51"
											},
											{
												"0": "81027",
												"1": "2158",
												"2": "43.460000000000000000",
												"3": "2",
												"4": "54"
											},
											{
												"0": "81180",
												"1": "109",
												"2": "207.920000000000000000",
												"3": "8",
												"4": "50"
											},
											{
												"0": "81686",
												"1": "3128",
												"2": "64.240000000000000000",
												"3": "2",
												"4": "93"
											},
											{
												"0": "82401",
												"1": "87",
												"2": "18.430000000000000000",
												"3": "1",
												"4": "56"
											},
											{
												"0": "82442",
												"1": "3318",
												"2": "152.040000000000000000",
												"3": "4",
												"4": "53"
											},
											{
												"0": "82467",
												"1": "3033",
												"2": "72.720000000000000000",
												"3": "3",
												"4": "32"
											},
											{
												"0": "82625",
												"1": "104",
												"2": "35.230000000000000000",
												"3": "1",
												"4": "58"
											},
											{
												"0": "82983",
												"1": "802",
												"2": "58.800000000000000000",
												"3": "2",
												"4": "4"
											},
											{
												"0": "83417",
												"1": "24",
												"2": "22.280000000000000000",
												"3": "1",
												"4": "60"
											},
											{
												"0": "83425",
												"1": "158",
												"2": "45.240000000000000000",
												"3": "2",
												"4": "26"
											},
											{
												"0": "83704",
												"1": "3164",
												"2": "116.880000000000000000",
												"3": "4",
												"4": "53"
											},
											{
												"0": "84189",
												"1": "103",
												"2": "51.780000000000000000",
												"3": "2",
												"4": "29"
											},
											{
												"0": "84245",
												"1": "177",
												"2": "68.940000000000000000",
												"3": "3",
												"4": "5"
											},
											{
												"0": "84418",
												"1": "4412",
												"2": "64.800000000000000000",
												"3": "2",
												"4": "70"
											},
											{
												"0": "84464",
												"1": "2043",
												"2": "66.600000000000000000",
												"3": "3",
												"4": "11"
											},
											{
												"0": "84483",
												"1": "1335",
												"2": "115.560000000000000000",
												"3": "4",
												"4": "76"
											},
											{
												"0": "84543",
												"1": "1379",
												"2": "29.290000000000000000",
												"3": "1",
												"4": "87"
											},
											{
												"0": "84558",
												"1": "116",
												"2": "49.380000000000000000",
												"3": "3",
												"4": "10"
											},
											{
												"0": "84833",
												"1": "63",
												"2": "31.670000000000000000",
												"3": "1",
												"4": "41"
											},
											{
												"0": "85070",
												"1": "4882",
												"2": "58.740000000000000000",
												"3": "2",
												"4": "92"
											},
											{
												"0": "85161",
												"1": "162",
												"2": "64.420000000000000000",
												"3": "2",
												"4": "99"
											},
											{
												"0": "85170",
												"1": "2934",
												"2": "103.860000000000000000",
												"3": "6",
												"4": "52"
											},
											{
												"0": "85501",
												"1": "682",
												"2": "74.280000000000000000",
												"3": "3",
												"4": "87"
											},
											{
												"0": "86205",
												"1": "3173",
												"2": "52.940000000000000000",
												"3": "2",
												"4": "15"
											},
											{
												"0": "86205",
												"1": "115",
												"2": "61.580000000000000000",
												"3": "2",
												"4": "53"
											},
											{
												"0": "86349",
												"1": "768",
												"2": "127.440000000000000000",
												"3": "4",
												"4": "76"
											},
											{
												"0": "86456",
												"1": "347",
												"2": "29.590000000000000000",
												"3": "1",
												"4": "52"
											},
											{
												"0": "86557",
												"1": "4475",
												"2": "86.640000000000000000",
												"3": "4",
												"4": "37"
											},
											{
												"0": "86629",
												"1": "200",
												"2": "74.340000000000000000",
												"3": "3",
												"4": "32"
											},
											{
												"0": "86641",
												"1": "72",
												"2": "52.060000000000000000",
												"3": "2",
												"4": "9"
											},
											{
												"0": "86811",
												"1": "3635",
												"2": "88.800000000000000000",
												"3": "3",
												"4": "51"
											},
											{
												"0": "86846",
												"1": "152",
												"2": "75.870000000000000000",
												"3": "3",
												"4": "72"
											},
											{
												"0": "87075",
												"1": "1777",
												"2": "139.240000000000000000",
												"3": "4",
												"4": "35"
											},
											{
												"0": "87086",
												"1": "2362",
												"2": "35.520000000000000000",
												"3": "1",
												"4": "80"
											},
											{
												"0": "87095",
												"1": "2911",
												"2": "65.720000000000000000",
												"3": "2",
												"4": "80"
											},
											{
												"0": "87103",
												"1": "92",
												"2": "77.750000000000000000",
												"3": "5",
												"4": "82"
											},
											{
												"0": "87126",
												"1": "154",
												"2": "52.280000000000000000",
												"3": "2",
												"4": "92"
											},
											{
												"0": "87126",
												"1": "172",
												"2": "36.970000000000000000",
												"3": "1",
												"4": "46"
											},
											{
												"0": "87142",
												"1": "101",
												"2": "127.500000000000000000",
												"3": "3",
												"4": "60"
											},
											{
												"0": "87314",
												"1": "2885",
												"2": "26.610000000000000000",
												"3": "1",
												"4": "67"
											},
											{
												"0": "87480",
												"1": "3496",
												"2": "94.620000000000000000",
												"3": "3",
												"4": "56"
											},
											{
												"0": "87546",
												"1": "3918",
												"2": "74.460000000000000000",
												"3": "3",
												"4": "70"
											},
											{
												"0": "87607",
												"1": "2307",
												"2": "141.720000000000000000",
												"3": "4",
												"4": "17"
											},
											{
												"0": "87690",
												"1": "114",
												"2": "153.920000000000000000",
												"3": "4",
												"4": "76"
											},
											{
												"0": "88259",
												"1": "2396",
												"2": "23.530000000000000000",
												"3": "1",
												"4": "22"
											},
											{
												"0": "88440",
												"1": "5",
												"2": "50.620000000000000000",
												"3": "2",
												"4": "23"
											},
											{
												"0": "88485",
												"1": "226",
												"2": "71.790000000000000000",
												"3": "3",
												"4": "20"
											},
											{
												"0": "88518",
												"1": "2287",
												"2": "46.480000000000000000",
												"3": "2",
												"4": "16"
											},
											{
												"0": "88750",
												"1": "633",
												"2": "65.320000000000000000",
												"3": "2",
												"4": "30"
											},
											{
												"0": "88796",
												"1": "885",
												"2": "26.170000000000000000",
												"3": "1",
												"4": "17"
											},
											{
												"0": "88858",
												"1": "199",
												"2": "66.660000000000000000",
												"3": "2",
												"4": "45"
											},
											{
												"0": "89226",
												"1": "3769",
												"2": "20.630000000000000000",
												"3": "1",
												"4": "12"
											},
											{
												"0": "89283",
												"1": "1772",
												"2": "105.840000000000000000",
												"3": "4",
												"4": "34"
											},
											{
												"0": "89976",
												"1": "2006",
												"2": "74.240000000000000000",
												"3": "4",
												"4": "51"
											},
											{
												"0": "90083",
												"1": "315",
												"2": "118.880000000000000000",
												"3": "4",
												"4": "9"
											},
											{
												"0": "90131",
												"1": "4896",
												"2": "46.260000000000000000",
												"3": "2",
												"4": "34"
											},
											{
												"0": "90335",
												"1": "1441",
												"2": "21.270000000000000000",
												"3": "1",
												"4": "1"
											},
											{
												"0": "90367",
												"1": "3575",
												"2": "136.320000000000000000",
												"3": "4",
												"4": "39"
											},
											{
												"0": "90652",
												"1": "34",
												"2": "88.000000000000000000",
												"3": "4",
												"4": "79"
											},
											{
												"0": "90671",
												"1": "195",
												"2": "24.140000000000000000",
												"3": "1",
												"4": "7"
											},
											{
												"0": "91493",
												"1": "4549",
												"2": "17.750000000000000000",
												"3": "1",
												"4": "31"
											},
											{
												"0": "91646",
												"1": "202",
												"2": "72.690000000000000000",
												"3": "3",
												"4": "51"
											},
											{
												"0": "91798",
												"1": "224",
												"2": "125.970000000000000000",
												"3": "3",
												"4": "62"
											},
											{
												"0": "91817",
												"1": "3651",
												"2": "101.820000000000000000",
												"3": "3",
												"4": "40"
											},
											{
												"0": "92030",
												"1": "98",
												"2": "83.250000000000000000",
												"3": "3",
												"4": "88"
											},
											{
												"0": "92293",
												"1": "27",
												"2": "95.280000000000000000",
												"3": "3",
												"4": "65"
											},
											{
												"0": "92456",
												"1": "242",
												"2": "104.560000000000000000",
												"3": "4",
												"4": "98"
											},
											{
												"0": "92543",
												"1": "173",
												"2": "95.320000000000000000",
												"3": "4",
												"4": "60"
											},
											{
												"0": "92565",
												"1": "4069",
												"2": "87.480000000000000000",
												"3": "3",
												"4": "93"
											},
											{
												"0": "92581",
												"1": "94",
												"2": "85.680000000000000000",
												"3": "3",
												"4": "54"
											},
											{
												"0": "92623",
												"1": "2015",
												"2": "31.660000000000000000",
												"3": "1",
												"4": "43"
											},
											{
												"0": "92794",
												"1": "2252",
												"2": "23.790000000000000000",
												"3": "1",
												"4": "80"
											},
											{
												"0": "92961",
												"1": "780",
												"2": "68.340000000000000000",
												"3": "3",
												"4": "66"
											},
											{
												"0": "93136",
												"1": "169",
												"2": "155.160000000000000000",
												"3": "4",
												"4": "74"
											},
											{
												"0": "93204",
												"1": "464",
												"2": "92.480000000000000000",
												"3": "4",
												"4": "13"
											},
											{
												"0": "93507",
												"1": "170",
												"2": "55.700000000000000000",
												"3": "2",
												"4": "84"
											},
											{
												"0": "93533",
												"1": "81",
												"2": "51.560000000000000000",
												"3": "2",
												"4": "19"
											},
											{
												"0": "93687",
												"1": "124",
												"2": "26.150000000000000000",
												"3": "1",
												"4": "9"
											},
											{
												"0": "93837",
												"1": "2194",
												"2": "77.550000000000000000",
												"3": "3",
												"4": "65"
											},
											{
												"0": "94256",
												"1": "2939",
												"2": "24.670000000000000000",
												"3": "1",
												"4": "27"
											},
											{
												"0": "94337",
												"1": "3143",
												"2": "43.700000000000000000",
												"3": "2",
												"4": "48"
											},
											{
												"0": "94573",
												"1": "4276",
												"2": "28.970000000000000000",
												"3": "1",
												"4": "9"
											},
											{
												"0": "94643",
												"1": "213",
												"2": "87.210000000000000000",
												"3": "3",
												"4": "12"
											},
											{
												"0": "94839",
												"1": "4472",
												"2": "25.260000000000000000",
												"3": "1",
												"4": "89"
											},
											{
												"0": "94914",
												"1": "4767",
												"2": "63.000000000000000000",
												"3": "3",
												"4": "87"
											},
											{
												"0": "95324",
												"1": "4866",
												"2": "142.920000000000000000",
												"3": "4",
												"4": "3"
											},
											{
												"0": "95392",
												"1": "27",
												"2": "95.280000000000000000",
												"3": "3",
												"4": "41"
											},
											{
												"0": "95546",
												"1": "3393",
												"2": "91.350000000000000000",
												"3": "3",
												"4": "96"
											},
											{
												"0": "95760",
												"1": "4458",
												"2": "34.270000000000000000",
												"3": "1",
												"4": "78"
											},
											{
												"0": "95776",
												"1": "2138",
												"2": "111.960000000000000000",
												"3": "4",
												"4": "47"
											},
											{
												"0": "95857",
												"1": "4837",
												"2": "26.750000000000000000",
												"3": "1",
												"4": "27"
											},
											{
												"0": "95903",
												"1": "135",
												"2": "72.480000000000000000",
												"3": "2",
												"4": "18"
											},
											{
												"0": "96097",
												"1": "4987",
												"2": "74.900000000000000000",
												"3": "2",
												"4": "52"
											},
											{
												"0": "96124",
												"1": "3319",
												"2": "119.480000000000000000",
												"3": "4",
												"4": "33"
											},
											{
												"0": "96219",
												"1": "3269",
												"2": "40.040000000000000000",
												"3": "2",
												"4": "10"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "TotalAmountDecember",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "TotalQuantityDecember",
												"type": "bigint"
											},
											{
												"key": "4",
												"name": "TotalItemsPurchasedLast12Months",
												"type": "bigint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e9e3642f-d367-4a55-a303-99ef26cea082/resourceGroups/data-engineering-synapse-67xklnc/providers/Microsoft.Synapse/workspaces/asaworkspace67xklnc/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace67xklnc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/Day=20191231/sale-small-20191231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))\r\n",
							"\r\n",
							"datalake = 'asadatalake67xklnc'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"display(profitByDateProduct.limit(100))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option('inferSchema', 'true') \\\r\n",
							"        .json('abfss://wwi-02@' + datalake + '.dfs.core.windows.net/online-user-profiles-02/*.json', multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# create a view called user_profiles\r\n",
							"df.createOrReplaceTempView(\"user_profiles\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Let's order by the number of items purchased in the last 12 months\r\n",
							"sortedTopPurchases = topPurchases.orderBy(\"itemsPurchasedLast12Months\")\r\n",
							"\r\n",
							"display(sortedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"topPurchases.orderBy(\"itemsPurchasedLast12Months desc\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sortedTopPurchases = (topPurchases\r\n",
							"    .orderBy( col(\"itemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"display(sortedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"display(groupedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"display(groupedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create a temporary view for top purchases so we can load from Scala\r\n",
							"topPurchases.createOrReplaceTempView(\"top_purchases\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"// Make sure the name of the dedcated SQL pool (SQLPool01 below) matches the name of your SQL pool.\r\n",
							"val df = spark.sqlContext.sql(\"select * from top_purchases\")\r\n",
							"df.write.synapsesql(\"SQLPool01.wwi.TopPurchases\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"dfsales = spark.read.load('abfss://wwi-02@' + datalake + '.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet', format='parquet')\r\n",
							"display(dfsales.limit(10))"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"// Make sure the name of the SQL pool (SQLPool01 below) matches the name of your SQL pool.\r\n",
							"val df2 = spark.read.synapsesql(\"SQLPool01.wwi.TopPurchases\")\r\n",
							"df2.createTempView(\"top_purchases_sql\")\r\n",
							"\r\n",
							"df2.head(10)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"dfTopPurchasesFromSql = sqlContext.table(\"top_purchases_sql\")\r\n",
							"\r\n",
							"display(dfTopPurchasesFromSql.limit(10))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"inner_join = dfsales.join(dfTopPurchasesFromSql,\r\n",
							"    (dfsales.CustomerId == dfTopPurchasesFromSql.visitorId) & (dfsales.ProductId == dfTopPurchasesFromSql.productId))\r\n",
							"\r\n",
							"inner_join_agg = (inner_join.select(\"CustomerId\",\"TotalAmount\",\"Quantity\",\"itemsPurchasedLast12Months\",\"top_purchases_sql.productId\")\r\n",
							"    .groupBy([\"CustomerId\",\"top_purchases_sql.productId\"])\r\n",
							"    .agg(\r\n",
							"        sum(\"TotalAmount\").alias(\"TotalAmountDecember\"),\r\n",
							"        sum(\"Quantity\").alias(\"TotalQuantityDecember\"),\r\n",
							"        sum(\"itemsPurchasedLast12Months\").alias(\"TotalItemsPurchasedLast12Months\"))\r\n",
							"    .orderBy(\"CustomerId\") )\r\n",
							"\r\n",
							"display(inner_join_agg.limit(100))"
						],
						"outputs": [],
						"execution_count": 19
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8adb09e8-6e78-40ec-a391-9262a756feea"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"1aebcbee-0092-4cd6-b43e-4def258d3013": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "829",
												"3": 4,
												"4": "30.500000000000000000",
												"5": "122.000000000000000000",
												"6": "20191231",
												"7": "38.640000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "3683",
												"3": 1,
												"4": "34.440000000000000000",
												"5": "34.440000000000000000",
												"6": "20191231",
												"7": "9.940000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "812",
												"3": 1,
												"4": "28.630000000000000000",
												"5": "28.630000000000000000",
												"6": "20191231",
												"7": "7.200000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "117",
												"3": 2,
												"4": "25.500000000000000000",
												"5": "51.000000000000000000",
												"6": "20191231",
												"7": "15.660000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "406",
												"3": 3,
												"4": "36.590000000000000000",
												"5": "109.770000000000000000",
												"6": "20191231",
												"7": "34.710000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "231",
												"3": 3,
												"4": "25.580000000000000000",
												"5": "76.740000000000000000",
												"6": "20191231",
												"7": "25.020000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2689",
												"3": 3,
												"4": "24.000000000000000000",
												"5": "72.000000000000000000",
												"6": "20191231",
												"7": "19.770000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2095",
												"3": 4,
												"4": "32.380000000000000000",
												"5": "129.520000000000000000",
												"6": "20191231",
												"7": "36.000000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "92",
												"3": 1,
												"4": "15.550000000000000000",
												"5": "15.550000000000000000",
												"6": "20191231",
												"7": "4.730000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "1912",
												"3": 1,
												"4": "24.620000000000000000",
												"5": "24.620000000000000000",
												"6": "20191231",
												"7": "7.390000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e9e3642f-d367-4a55-a303-99ef26cea082/resourceGroups/data-engineering-synapse-67xklnc/providers/Microsoft.Synapse/workspaces/asaworkspace67xklnc/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace67xklnc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/Day=20191231/sale-small-20191231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.parquet('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy-test.parquet')"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c2a6567f-f3c8-4e90-959d-459723f0e6cf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"d1f8f689-2b4e-4bc8-8ce3-256c7739ae27": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "829",
												"3": 4,
												"4": "30.500000000000000000",
												"5": "122.000000000000000000",
												"6": "20191231",
												"7": "38.640000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "3683",
												"3": 1,
												"4": "34.440000000000000000",
												"5": "34.440000000000000000",
												"6": "20191231",
												"7": "9.940000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "812",
												"3": 1,
												"4": "28.630000000000000000",
												"5": "28.630000000000000000",
												"6": "20191231",
												"7": "7.200000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "117",
												"3": 2,
												"4": "25.500000000000000000",
												"5": "51.000000000000000000",
												"6": "20191231",
												"7": "15.660000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "406",
												"3": 3,
												"4": "36.590000000000000000",
												"5": "109.770000000000000000",
												"6": "20191231",
												"7": "34.710000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "231",
												"3": 3,
												"4": "25.580000000000000000",
												"5": "76.740000000000000000",
												"6": "20191231",
												"7": "25.020000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2689",
												"3": 3,
												"4": "24.000000000000000000",
												"5": "72.000000000000000000",
												"6": "20191231",
												"7": "19.770000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "2095",
												"3": 4,
												"4": "32.380000000000000000",
												"5": "129.520000000000000000",
												"6": "20191231",
												"7": "36.000000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "92",
												"3": 1,
												"4": "15.550000000000000000",
												"5": "15.550000000000000000",
												"6": "20191231",
												"7": "4.730000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											},
											{
												"0": "7365e3cb-c098-4001-83ab-68693b87809d",
												"1": "2",
												"2": "1912",
												"3": 1,
												"4": "24.620000000000000000",
												"5": "24.620000000000000000",
												"6": "20191231",
												"7": "7.390000000000000000",
												"8": 12,
												"9": 52,
												"10": "9559"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e9e3642f-d367-4a55-a303-99ef26cea082/resourceGroups/data-engineering-synapse-67xklnc/providers/Microsoft.Synapse/workspaces/asaworkspace67xklnc/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspace67xklnc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/Day=20191231/sale-small-20191231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.parquet('abfss://wwi-02@asadatalake67xklnc.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy-test.parquet')"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		}
	]
}